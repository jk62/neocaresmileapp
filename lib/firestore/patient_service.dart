import 'dart:io';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:flutter/foundation.dart';
import 'package:neocaresmileapp/firestore/appointment_service.dart';
import 'dart:developer' as devtools show log;
import 'package:neocaresmileapp/mywidgets/patient.dart';
import 'package:uuid/uuid.dart';

class PatientService {
  String _clinicId;
  String _doctorId;
  final FirebaseFirestore firestore;
  final FirebaseStorage storage;
  //----------------------------------------------------------------------------//
  // Constructor
  // PatientService(
  //   this._clinicId,
  //   this._doctorId, {
  //   FirebaseFirestore? firestoreInstance,
  //   FirebaseStorage? storageInstance,
  // })  : firestore = firestoreInstance ?? FirebaseFirestore.instance,
  //       storage = storageInstance ?? FirebaseStorage.instance;

  PatientService(
    this._clinicId,
    this._doctorId, {
    FirebaseFirestore? firestoreInstance,
    FirebaseStorage? storageInstance,
  })  : firestore = firestoreInstance ?? FirebaseFirestore.instance,
        storage = storageInstance ?? FirebaseStorage.instance {
    devtools.log(
        'PatientService initialized with clinicId: $_clinicId, doctorId: $_doctorId');
  }
  //----------------------------------------------------------------------------------//

  // Getter for clinicId
  String get clinicId => _clinicId;
  // Getter for doctorId
  String get doctorId => _doctorId;

  // Method to update the clinic ID and doctor ID
  void updateClinicAndDoctor(String newClinicId, String newDoctorId) {
    if (_clinicId != newClinicId || _doctorId != newDoctorId) {
      _clinicId = newClinicId;
      _doctorId = newDoctorId;
      devtools.log(
          'Updated PatientService clinicId to: $_clinicId and doctorId to: $_doctorId');
    }
  }

  CollectionReference get _patientsCollection {
    devtools.log("Accessing patients collection for clinicId: $_clinicId");
    if (clinicId.isEmpty) {
      throw ArgumentError('clinicId cannot be empty');
    }
    return firestore
        .collection('clinics')
        .doc(_clinicId)
        .collection('patients');
  }

  //----------------------------------------------------------------------------//

  Future<String> addPatient(
    String patientName,
    String gender,
    int age,
    String patientMobileNumber,
    String? patientPicUrl,
  ) async {
    try {
      //print('_patientsCollection this time is : $_patientsCollection');
      print('**** addPatient defined inside PatientService is invoked ****');
      print('**** _patientsCollection is $_patientsCollection ******');
      print('**** newPatientRef is ${_patientsCollection.doc()} ****');
      devtools.log(
          'Adding new patient: This is coming from addPatient inside patient service');
      devtools.log('Name: $patientName');
      devtools.log('Gender: $gender');
      devtools.log('Age: $age');
      devtools.log('patientMobileNumber: $patientMobileNumber');
      devtools.log('Clinic ID: $clinicId');

      final uhid = await generateUhid(
          clinicId); // Generate the unique uhid for the patient
      devtools.log('this uhid is just generated by _generateUhid method $uhid');
      print(
          '**** this uhid is just generated by _generateUhid method $uhid ****');

      final patientData = {
        'patientName': patientName,
        'gender': gender,
        'age': age,
        'patientMobileNumber': patientMobileNumber,
        'uhid': uhid,
        'patientPicUrl': patientPicUrl, // Save the image URL in Firestore
        'doctorId': doctorId,
        'clinicId': clinicId,
      };
      devtools.log('Creating a new document reference...');

      final newPatientRef =
          _patientsCollection.doc(); // Firestore will generate a unique ID
      print('**** newPatientRef is $newPatientRef ****');
      final newPatientId = newPatientRef.id; // Get the generated ID
      print('**** newPatientId is $newPatientId ****');
      patientData['patientId'] =
          newPatientId; // Assign the ID to the patientData
      devtools.log('patientData is $patientData');
      print('patientData is $patientData');

      try {
        devtools.log(
            'this is coming from inside the try block before await newPatientRef.set(patientData);');
        devtools.log('Setting patient data: $patientData...');
        print(
            'this is coming from inside the try block before await newPatientRef.set(patientData);');
        print('Setting patient data: $patientData...');
        await newPatientRef.set(patientData);
      } catch (e) {
        devtools.log('error in pushing data due to $e');
        print('error in pushing data due to $e');
      }
      // await newPatientRef.set(patientData);
      devtools.log('newPatientRef is $newPatientRef');
      print('**** newPatientRef is $newPatientRef ****');
      print('**** newPatientId is $newPatientId ****');
      // Return the ID of the newly created patient
      return newPatientId; // Return the generated ID
    } catch (e) {
      devtools.log('Error while adding patient: $e');
      print('**** Error while adding patient: $e ****');
      return ''; // Return an empty string if there was an error
    }
  }

  // Update an existing patient in Firestore
  Future<void> updatePatient(String patientId, String patientName,
      String gender, int age, String patientMobileNumber) async {
    final patientData = {
      'patientName': patientName,
      'gender': gender,
      'age': age,
      'patientMobileNumber': patientMobileNumber,
    };
    await _patientsCollection.doc(patientId).update(patientData);
  }

  // Get all patients from Firestore
  Future<List<Map<String, dynamic>>> getAllPatients() async {
    final snapshot = await _patientsCollection.get();
    return snapshot.docs
        .map((doc) => doc.data() as Map<String, dynamic>)
        .toList();
  }

  Future<String> generateUhid(String clinicId) async {
    print('**** generateUhid defined inside PatientService invoked ****');
    final clinicRef = firestore
        .collection('clinics')
        .doc(clinicId); // Use the injected instance
    final uhidRef = clinicRef.collection('uhids').doc('current');

    // Use a transaction to get the current uhid value and increment it
    return firestore.runTransaction((transaction) async {
      final doc = await transaction.get(uhidRef);
      final currentUhid = doc.exists ? doc.data()!['value'] : 0;
      final newUhid = currentUhid + 1;
      transaction.set(uhidRef, {'value': newUhid});
      return newUhid.toString().padLeft(6, '0'); // Convert to 6-digit string
    });
  }

  //-----------------------------------------------------------------------//

  Future<void> searchPatient(String patientName) async {
    print(
        '**** searchPatient defined inside PatientService invoked with patientName $patientName .  ****');

    try {
      print('**** Performing Firestore query... ****');
      final querySnapshot = await _patientsCollection
          .where('patientName', isEqualTo: patientName)
          .get();
      print('**** searchPatient: _patientsCollection called ****');

      print('****  querySnapshot is $querySnapshot ****');

      if (querySnapshot.docs.isNotEmpty) {
        final patientId = querySnapshot.docs.first.id;
        print(
            '**** querySnapshot.doc is not empty. patientId is $patientId ****');

        // Increment the searchCount for the found patient
        await incrementSearchCount(patientId);
      } else {
        // Handle case when no patient is found with the given name
        devtools.log('No patient found with name: $patientName');
      }
    } catch (e) {
      devtools.log('Error while searching patient: $e');
    }
  }

  // Get a single patient from Firestore by patientId
  Future<Map<String, dynamic>?> getPatientById(String patientId) async {
    if (patientId.isEmpty) {
      return null; // Return early if patientId is empty
    }

    final patientRef = _patientsCollection.doc(patientId);

    // Use a transaction to increment the searchCount and get patient data
    // return FirebaseFirestore.instance.runTransaction((transaction) async {
    //   final doc = await transaction.get(patientRef);
    return firestore.runTransaction((transaction) async {
      final doc = await transaction.get(patientRef);

      if (doc.exists) {
        // Increment the searchCount
        final currentSearchCount =
            (doc.data() as Map<String, dynamic>)['searchCount'] ?? 0;
        transaction.update(patientRef, {'searchCount': currentSearchCount + 1});

        // Return the patient data
        return doc.data() as Map<String, dynamic>?;
      } else {
        return null; // Patient not found
      }
    });
  }

  Future<void> incrementSearchCount(String patientId) async {
    print(
        '**** incrementSearchCount defined inside PatientService invoked with patientId $patientId ****');
    devtools
        .log('Welcome inside incrementSearchCount. patientId is $patientId');
    //--------------------------------------------------------------------------//
    print('**** _patientsCollection is $_patientsCollection ****');
    DocumentReference patientDoc = _patientsCollection.doc(patientId);
    print('**** patientDoc after creation is $patientDoc ****');

    //--------------------------------------------------------------------------//

    devtools.log('patientDoc  is $patientDoc');

    devtools.log('patientDoc path is ${patientDoc.path}');

    // Use a transaction to ensure atomicity
    // await FirebaseFirestore.instance.runTransaction((transaction) async {
    await firestore.runTransaction((transaction) async {
      devtools.log('Starting transaction for patientId $patientId');
      print('**** Starting transaction for patientId $patientId ****');

      DocumentSnapshot snapshot = await transaction.get(patientDoc);
      devtools.log('snapshot exists: ${snapshot.exists}');
      devtools.log('snapshot data: ${snapshot.data()}');
      print('**** snapshot exists: ${snapshot.exists} ****');
      print('**** snsnapshot data: ${snapshot.data()} ****');

      if (!snapshot.exists) {
        devtools.log('Patient does not exist!');
        print('**** Patient does not exist! ****');
        throw Exception("Patient does not exist!");
      }

      // Ensure you are using the correct field name here
      int currentCount = snapshot.get('searchCount') ?? 0;
      devtools.log('Current search count is $currentCount');
      print('**** Current search count is $currentCount ****');
      transaction.update(patientDoc, {'searchCount': currentCount + 1});

      devtools.log('incremented Search count is ${currentCount + 1}');
      print('**** incremented Search count is ${currentCount + 1} ****');
    }).then((_) {
      devtools.log('Transaction completed successfully');
      print('**** Transaction completed successfully ****');
    }).catchError((error) {
      devtools.log('Transaction failed with error: $error');
      print('**** Transaction failed with error: $error ****');
    });
  }

  Future<List<Patient>> handleSearchInput(String query) async {
    try {
      final querySnapshot = await _patientsCollection
          .where('patientName', isEqualTo: query)
          .get();

      if (querySnapshot.docs.isNotEmpty) {
        final patientData =
            querySnapshot.docs.first.data() as Map<String, dynamic>?;
        final patientList = <Patient>[];

        if (patientData != null) {
          final searchedPatient = Patient(
            patientId: querySnapshot.docs.first.id,
            age: patientData['age'] as int? ?? 0,
            gender: patientData['gender'] as String? ?? '',
            patientName: patientData['patientName'] as String? ?? '',
            patientMobileNumber:
                patientData['patientMobileNumber'] as String? ?? '',
            patientPicUrl: patientData['patientPicUrl'] as String? ?? '',
            uhid: patientData['uhid'] as String? ?? '',
            clinicId: patientData['clinicId'] as String? ?? '',
            doctorId: patientData['doctorId'] as String? ?? '',
            searchCount: patientData['searchCount'] as int? ?? 0,
          );

          // Increment the searchCount for the found patient
          //await incrementSearchCount(searchedPatient.patientId);

          // Add the patient to the list
          patientList.add(searchedPatient);
        }

        return patientList;
      } else {
        return []; // Return an empty list if no patient is found
      }
    } catch (e) {
      devtools.log('Error handling search input: $e');
      return []; // Return an empty list in case of an error
    }
  }

  Stream<List<Patient>> searchPatientsForCurrentUserRealTime(
      String userInput, Patient? selectedPatient) {
    final patientsCollection =
        _patientsCollection.where('doctorId', isEqualTo: doctorId);

    return patientsCollection.snapshots().asyncMap((snapshot) async {
      final matchingPatients = <Patient>[];

      for (final doc in snapshot.docs) {
        final data = doc.data() as Map<String, dynamic>?;

        if (data != null) {
          final patientName =
              (data['patientName'] as String?)?.toLowerCase() ?? '';
          final patientMobileNumber =
              (data['patientMobileNumber'] as String?) ?? '';

          if (patientName.contains(userInput.toLowerCase()) ||
              patientMobileNumber.contains(userInput)) {
            // Create a Patient instance
            final patient = Patient(
              patientId: doc.id,
              age: data['age'] as int? ?? 0,
              gender: data['gender'] as String? ?? '',
              patientName: data['patientName'] as String? ?? '',
              patientMobileNumber: data['patientMobileNumber'] as String? ?? '',
              patientPicUrl: data['patientPicUrl'] as String? ?? '',
              uhid: data['uhid'] as String? ?? '',
              clinicId: data['clinicId'] as String? ?? '',
              doctorId: data['doctorId'] as String? ?? '',
              searchCount: data['searchCount'] as int? ?? 0,
            );

            // Add the patient to the list
            matchingPatients.add(patient);
          }
        }
      }

      return matchingPatients;
    });
  }

  //-------------------------------------------------------------------------//

  Stream<List<Patient>> searchPatientsRealTime(
      String userInput, String clinicId) {
    final patientsCollection = _patientsCollection;

    // Filter patients by clinicId
    final query = patientsCollection.where('clinicId', isEqualTo: clinicId);

    return query.snapshots().asyncMap((snapshot) async {
      final matchingPatients = <Patient>[];

      for (final doc in snapshot.docs) {
        final data = doc.data() as Map<String, dynamic>?;

        if (data != null) {
          final patientName =
              (data['patientName'] as String?)?.toLowerCase() ?? '';
          final patientMobileNumber = data['patientMobileNumber'] ?? '';

          // Check if the patient name or mobile number matches the input query
          if (patientName.contains(userInput.toLowerCase()) ||
              patientMobileNumber.contains(userInput)) {
            final patient = Patient(
              patientId: doc.id,
              age: data['age'] as int? ?? 0,
              gender: data['gender'] as String? ?? '',
              patientName: data['patientName'] as String? ?? '',
              patientMobileNumber: data['patientMobileNumber'] as String? ?? '',
              patientPicUrl: data['patientPicUrl'] as String? ?? '',
              uhid: data['uhid'] as String? ?? '',
              clinicId: data['clinicId'] as String? ?? '',
              doctorId: data['doctorId'] as String? ?? '',
              searchCount: data['searchCount'] as int? ?? 0,
            );

            matchingPatients.add(patient);
          }
        }
      }

      return matchingPatients;
    });
  }

  //-------------------------------------------------------------------------//

  Stream<List<Patient>> getAllPatientsForCurrentUserRealTime() {
    final patientsCollection =
        _patientsCollection.where('doctorId', isEqualTo: doctorId);

    return patientsCollection.snapshots().asyncMap((snapshot) async {
      final Map<String, List<Patient>> patientsByAlphabet = {};

      for (final doc in snapshot.docs) {
        final data = doc.data() as Map<String, dynamic>?;

        if (data != null) {
          final patient = Patient(
            patientId: doc.id,
            age: data['age'] as int? ?? 0,
            gender: data['gender'] as String? ?? '',
            patientName: data['patientName'] as String? ?? '',
            patientMobileNumber: data['patientMobileNumber'] as String? ?? '',
            patientPicUrl: data['patientPicUrl'] as String? ?? '',
            uhid: data['uhid'] as String? ?? '',
            clinicId: data['clinicId'] as String? ?? '',
            doctorId: data['doctorId'] as String? ?? '',
            searchCount: data['searchCount'] as int? ?? 0,
          );

          final patientFirstChar =
              patient.patientName.isNotEmpty ? patient.patientName[0] : '';

          // Group patients by their first character
          patientsByAlphabet.putIfAbsent(patientFirstChar, () => []);
          patientsByAlphabet[patientFirstChar]!.add(patient);
        }
      }

      // Sort the list by first characters
      final sortedPatients = patientsByAlphabet.entries.toList()
        ..sort((a, b) => a.key.compareTo(b.key));

      // Flatten the list
      final allPatients =
          sortedPatients.expand((entry) => entry.value).toList();

      return allPatients;
    });
  }

  //-------------------------------------------------------------------------//

  Stream<List<Patient>> getAllPatientsRealTime({String? clinicId}) {
    final patientsCollection = _patientsCollection;
    // Log the clinicId being used for filtering
    devtools.log(
        "**** Welcome inside getAllPatientsRealTime defined in PatientService. Fetching all patients for clinicId: $clinicId");

    // Apply clinicId filter if provided
    final query = clinicId != null && clinicId.isNotEmpty
        ? patientsCollection.where('clinicId', isEqualTo: clinicId)
        : patientsCollection;

    return query.snapshots().asyncMap((snapshot) async {
      devtools.log("**** Snapshot received with ${snapshot.size} documents.");
      if (snapshot.size == 0) {
        devtools.log("**** No documents found for clinicId: $clinicId");
      }
      final allPatients = snapshot.docs
          .map((doc) {
            final data = doc.data() as Map<String, dynamic>?;

            // Add a debug statement to ensure data exists
            if (data == null || data.isEmpty) {
              devtools
                  .log("**** No data found for document with ID: ${doc.id}");
              return null;
            } else {
              devtools.log("**** Document data for patient ${doc.id}: $data");
            }

            // Create Patient object if data is not null
            try {
              devtools.log("**** Document data for patient ${doc.id}: $data");
              final patient = Patient(
                patientId: doc.id,
                age: data['age'] as int? ?? 0,
                gender: data['gender'] as String? ?? '',
                patientName: data['patientName'] as String? ?? '',
                patientMobileNumber:
                    data['patientMobileNumber'] as String? ?? '',
                patientPicUrl: data['patientPicUrl'] as String? ?? '',
                uhid: data['uhid'] as String? ?? '',
                clinicId: data['clinicId'] as String? ?? '',
                doctorId: data['doctorId'] as String? ?? '',
                searchCount: data['searchCount'] as int? ?? 0,
              );
              return patient;
            } catch (e) {
              devtools.log(
                  "**** Error creating Patient object for document ${doc.id}: $e");
              return null;
            }
          })
          .whereType<Patient>()
          .toList();

      // Log the list of patient IDs for verification
      devtools.log(
          "**** All Patients Retrieved: ${allPatients.map((p) => p.patientId).toList()}");

      // Sort patients alphabetically by name
      allPatients.sort((a, b) => a.patientName.compareTo(b.patientName));
      return allPatients;
    });
  }

  //-------------------------------------------------------------------------//

  Future<String> uploadPatientImage(File image, String patientId) async {
    try {
      print("**** uploadPatientImage invoked ****");
      // Generate a unique filename for the image
      final fileName = 'patient_images/$patientId/${const Uuid().v4()}';
      print("**** FileName generated: $fileName ****");

      // Upload the image to Firebase Storage
      // await FirebaseStorage.instance.ref(fileName).putFile(image);
      await storage.ref(fileName).putFile(image);
      print("**** putFile method called ****");

      // Get the download URL of the uploaded image
      // final imageUrl =
      //     await FirebaseStorage.instance.ref(fileName).getDownloadURL();
      final imageUrl = await storage.ref(fileName).getDownloadURL();
      print("**** getDownloadURL method called, URL: $imageUrl ****");

      return imageUrl;
    } catch (error) {
      print("**** Error uploading image: $error ****");
      devtools.log('Error uploading image: $error');
      throw Exception('Error uploading image');
    }
  }

  Future<void> updatePatientImage(String patientId, String imageUrl) async {
    try {
      // Update the patient document in Firestore with the image URL
      //
      await firestore
          .collection('clinics')
          .doc(clinicId)
          .collection('patients')
          .doc(patientId)
          .update({'patientPicUrl': imageUrl});
    } catch (error) {
      devtools.log('Error updating patient image URL: $error');
      throw Exception('Error updating patient image URL');
    }
  }

  //----------------------------------------------------------//
  Future<List<Map<String, dynamic>>> fetchRecentPatients({
    //required String doctorId,
    required String clinicId,
  }) async {
    devtools.log('_fetchRecentPatients invoked');
    if (clinicId.isEmpty) {
      throw ArgumentError('clinicId cannot be empty');
    }
    try {
      // final clinicsCollection =
      //     FirebaseFirestore.instance.collection('clinics');
      final clinicsCollection = firestore.collection('clinics');
      final patientsQuerySnapshot = await clinicsCollection
          .doc(clinicId)
          .collection('patients')
          .orderBy('searchCount', descending: true)
          .limit(4)
          .get();

      final recentPatientsData = <Map<String, dynamic>>[];

      for (final patientDoc in patientsQuerySnapshot.docs) {
        final patientData = patientDoc.data();
        if (patientData.isNotEmpty) {
          recentPatientsData.add(patientData);
        }
      }

      return recentPatientsData;
    } catch (e) {
      // Handle error
      devtools.log('Error fetching recent patients: $e');
      return []; // Return an empty list in case of an error
    }
  }

  //----------------------------------------------------------//

  Future<void> restorePatient(Patient patient) async {
    try {
      final patientData =
          patient.toMap(); // Convert the patient object to a map
      // final clinicRef = FirebaseFirestore.instance
      final clinicRef = firestore.collection('clinics').doc(patient.clinicId);
      final patientsRef =
          clinicRef.collection('patients').doc(patient.patientId);
      await patientsRef.set(patientData); // Restore the patient document
    } catch (e) {
      devtools.log('Error restoring patient: $e');
      // throw e; // Rethrow the error to be handled by the caller
      rethrow;
    }
  }

  //--------------------------------------------------------------------------//

  Future<void> deletePatient(String patientId, String doctorName) async {
    final AppointmentService appointmentService = AppointmentService();
    try {
      final patientRef = _patientsCollection.doc(patientId);

      // Fetch the patient's profile picture URL
      final patientSnapshot = await patientRef.get();
      final patientData = patientSnapshot.data() as Map<String, dynamic>?;
      final profilePicUrl = patientData?['patientPicUrl'] as String?;

      // Fetch treatment picture URLs
      final treatmentsSnapshot =
          await patientRef.collection('treatments').get();

      final List<String> treatmentPictureUrls = [];

      // Fetch pictures for each treatment document
      for (final treatmentDoc in treatmentsSnapshot.docs) {
        final picturesSnapshot =
            await treatmentDoc.reference.collection('pictures').get();
        final pictureUrls = picturesSnapshot.docs
            .map((doc) => doc.data()['picUrl'] as String?)
            .where((url) => url != null && url.isNotEmpty)
            .cast<String>()
            .toList();
        treatmentPictureUrls.addAll(pictureUrls);
      }

      // Capture appointment IDs and details
      final appointmentsSnapshot =
          await patientRef.collection('appointments').get();
      final appointments = appointmentsSnapshot.docs.map((doc) {
        return {
          'appointmentId': doc['appointmentId'],
          'appointmentDate': (doc['date'] as Timestamp).toDate(),
        };
      }).toList();
      devtools.log('appointments found are $appointments');

      // Delete patient's appointments sub-collection
      await deleteCollection(patientRef.collection('appointments'), 20);

      // Reference to main appointments collection
      final mainAppointmentsCollection = appointmentService.clinicsCollection
          .doc(clinicId)
          .collection('appointments');

      for (var appointment in appointments) {
        // Delete from main appointments collection
        final snapshot = await mainAppointmentsCollection
            .where('appointmentId', isEqualTo: appointment['appointmentId'])
            .get();

        for (final doc in snapshot.docs) {
          devtools.log('doc');

          final appointmentSlot = doc['slot'];

          await doc.reference.delete();

          // Update slots for future appointments
          if (appointment['appointmentDate'].isAfter(DateTime.now())) {
            await appointmentService.updateSlot(
              clinicId,
              doctorName,
              appointment['appointmentDate'],
              appointmentSlot,
            );
          }
        }
      }

      // Delete other sub-collections under treatments
      for (final treatmentDoc in treatmentsSnapshot.docs) {
        await deleteCollection(treatmentDoc.reference.collection('notes'), 20);
        await deleteCollection(
            treatmentDoc.reference.collection('payments'), 20);
        await deleteCollection(
            treatmentDoc.reference.collection('prescriptions'), 20);
        await deleteCollection(
            treatmentDoc.reference.collection('pictures'), 20);
        await treatmentDoc.reference.delete();
      }

      // Delete the patient document
      await patientRef.delete();

      // Delete pictures from storage
      final List<String> allPictureUrls = [];
      if (profilePicUrl != null && profilePicUrl.isNotEmpty) {
        allPictureUrls.add(profilePicUrl);
      }
      allPictureUrls.addAll(treatmentPictureUrls);

      // Call the _deletePicturesFromStorage with the valid URLs
      await deletePicturesFromStorage(allPictureUrls);
    } catch (e) {
      throw Exception('Error deleting patient: $e');
    }
  }

  Future<void> deleteCollection(
      CollectionReference collectionRef, int batchSize) async {
    devtools.log('Welcome inside _deleteCollection');
    QuerySnapshot snapshot;
    do {
      snapshot = await collectionRef.limit(batchSize).get();
      for (DocumentSnapshot doc in snapshot.docs) {
        await doc.reference.delete();
      }
    } while (snapshot.size == batchSize);
  }

  Future<void> deletePicturesFromStorage(List<String> urls) async {
    // Assuming `urls` is a List<String>, there's no need to check for null
    final validUrls = urls.where((url) => url.isNotEmpty).toList();

    if (validUrls.isEmpty) {
      devtools.log('No valid URLs to delete from storage.');
      return; // Return early if there are no valid URLs
    }

    //final storage = FirebaseStorage.instance;

    for (final url in validUrls) {
      try {
        final path = extractFilePathFromUrl(url);
        final ref = storage.ref().child(path);
        await ref.delete();
        devtools.log('Deleted picture from storage: $url');
      } catch (error) {
        devtools.log('Error deleting picture from storage: $error');
      }
    }
  }

  String extractFilePathFromUrl(String url) {
    final Uri uri = Uri.parse(url);
    final path = uri.path.replaceFirst('/v0/b/', '');
    final pathSegments = path.split('/o/');
    return pathSegments[1].split('?').first.replaceAll('%2F', '/');
  }

  //--------------------------------------------------------------------------//
  // Add this method to your PatientService class
  Future<List<Patient>> getPatientsBySearch(String? query) async {
    devtools.log(
        '@@@@@@@@@@@@  Welcome to getPatientsBySearch ! clinicId is $clinicId and doctorId is $doctorId @@@@@@@@@@@@');
    try {
      // bool isNumeric = double.tryParse(query) != null;
      if (query == null || query.isEmpty) {
        return [];
      }

      bool isNumeric = double.tryParse(query) != null;

      QuerySnapshot querySnapshot;

      // Fetch patients by doctorId
      // final patientsCollection = FirebaseFirestore.instance
      final patientsCollection =
          firestore.collection('clinics').doc(clinicId).collection('patients');

      querySnapshot =
          await patientsCollection.where('doctorId', isEqualTo: doctorId).get();

      // Prepare an empty list to hold matching patients
      List<Patient> matchingPatients = [];

      for (var doc in querySnapshot.docs) {
        final data = doc.data() as Map<String, dynamic>;
        final patientName = data['patientName'].toString().toLowerCase();
        final patientMobileNumber = data['patientMobileNumber'].toString();

        // Perform search logic: Match either by patient name (contains) or mobile number
        if (isNumeric) {
          if (patientMobileNumber.contains(query)) {
            matchingPatients.add(Patient(
              patientId: doc.id,
              patientName: data['patientName'] ?? '',
              patientMobileNumber: data['patientMobileNumber'] ?? '',
              age: data['age'] ?? 0,
              gender: data['gender'] ?? '',
              patientPicUrl: data['patientPicUrl'] ?? '',
              uhid: data['uhid'] ?? '',
              clinicId: clinicId,
              doctorId: doctorId,
              searchCount: data['searchCount'] ?? 0,
            ));
          }
        } else {
          if (patientName.contains(query.toLowerCase())) {
            matchingPatients.add(Patient(
              patientId: doc.id,
              patientName: data['patientName'] ?? '',
              patientMobileNumber: data['patientMobileNumber'] ?? '',
              age: data['age'] ?? 0,
              gender: data['gender'] ?? '',
              patientPicUrl: data['patientPicUrl'] ?? '',
              uhid: data['uhid'] ?? '',
              clinicId: clinicId,
              doctorId: doctorId,
              searchCount: data['searchCount'] ?? 0,
            ));
          }
        }
      }

      return matchingPatients;
    } catch (e) {
      devtools.log('Error searching patients: $e');
      return [];
    }
  }

  //---------------------------------------------------------------------------//

  //---------------------------------------------------------------------------//
  Future<List<Patient>> getPatientsBySearchForCurrentUser(String? query) async {
    devtools.log('Welcome to getPatientsBySearchForCurrentUser !');
    print('**** Welcome to getPatientsBySearchForCurrentUser ! ****');

    try {
      if (query == null || query.isEmpty) {
        print('**** query is null or empty ! ****');
        return [];
      }

      bool isNumeric = double.tryParse(query) != null;

      //QuerySnapshot querySnapshot;

      // Fetch patients by doctorId and search by name or mobile number
      // final patientsCollection = FirebaseFirestore.instance
      final patientsCollection = firestore
          .collection('clinics')
          .doc(clinicId)
          .collection('patients')
          .where('doctorId', isEqualTo: doctorId); // Include doctorId filter

      // Process snapshot and filter results
      final snapshot = await patientsCollection.get();
      final List<Patient> matchingPatients = [];
      print(
          '**** patientsCollection is $patientsCollection, snapshot is $snapshot ****');

      for (final doc in snapshot.docs) {
        print('**** doc in snapshot is $doc ****');
        final data = doc.data() as Map<String, dynamic>;
        final patientName = data['patientName'].toString().toLowerCase();
        print(
            '**** Comparing "$patientName" with query "${query.toLowerCase()}" ****');

        final patientMobileNumber = data['patientMobileNumber'].toString();
        print('**** Comparing "$patientMobileNumber" with query "$query" ****');

        print('**** Comparing "$patientName" with "$query" ****');

        if (isNumeric) {
          if (patientMobileNumber.contains(query)) {
            print(
                '**** Found matching patient by mobile: ${data['patientName']}****');
            matchingPatients.add(Patient.fromJson(data));
          }
        } else {
          if (patientName.contains(query.toLowerCase())) {
            print(
                '**** Found matching patient by name: ${data['patientName']} ****');
            matchingPatients.add(Patient.fromJson(data));
          }
        }
      }

      return matchingPatients;
    } catch (e) {
      devtools.log('Error searching patients: $e');
      print('**** Error searching patients: $e ****');
      return [];
    }
  }

  //--------------------------------------------------------------------------//
  // Method to listen to recent patients (Top 4 by searchCount)
  Stream<List<Map<String, dynamic>>> listenToTopRecentPatients(
      String clinicId) {
    // return FirebaseFirestore.instance
    return firestore
        .collection('clinics')
        .doc(clinicId)
        .collection('patients')
        .orderBy('searchCount', descending: true)
        .limit(4)
        .snapshots()
        .map((snapshot) {
      return snapshot.docs.map((doc) => doc.data()).toList();
    });
  }

  // Method to listen to changes in all patients to monitor their searchCount
  Stream<List<Map<String, dynamic>>> listenToAllPatients(String clinicId) {
    // return FirebaseFirestore.instance
    return firestore
        .collection('clinics')
        .doc(clinicId)
        .collection('patients')
        .snapshots()
        .map((snapshot) {
      return snapshot.docs.map((doc) => doc.data()).toList();
    });
  }

  //--------------------------------------------------------------------------//
}

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! //
// ############################################################################# //
// import 'dart:io';
// import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:firebase_storage/firebase_storage.dart';
// import 'package:flutter/foundation.dart';
// import 'package:neocare_dental_app/firestore/appointment_service.dart';
// import 'package:neocare_dental_app/mywidgets/clinic_selection.dart';
// import 'dart:developer' as devtools show log;
// import 'package:neocare_dental_app/mywidgets/patient.dart';
// import 'package:uuid/uuid.dart';

// class PatientService extends ChangeNotifier {
//   String _clinicId;
//   final String doctorId;
//   final FirebaseFirestore firestore;
//   final FirebaseStorage storage;

//   // Constructor
//   PatientService(
//     this._clinicId,
//     this.doctorId, {
//     FirebaseFirestore? firestoreInstance,
//     FirebaseStorage? storageInstance,
//   })  : firestore = firestoreInstance ?? FirebaseFirestore.instance,
//         storage = storageInstance ?? FirebaseStorage.instance {
//     // Listen for clinic changes
//     ClinicSelection.instance.addListener(_onClinicChanged);
//   }

//   // Getter for clinicId
//   String get clinicId => _clinicId;

//   // Method to update the clinic ID
//   void updateClinicId(String newClinicId) {
//     if (_clinicId != newClinicId) {
//       _clinicId = newClinicId;
//       devtools.log('Updated PatientService clinicId to: $_clinicId');
//       notifyListeners(); // Notify listeners that the clinic ID has changed
//     }
//   }

//   // Automatically update clinic ID when the global clinic selection changes
//   void _onClinicChanged() {
//     final newClinicId = ClinicSelection.instance.selectedClinicId;
//     if (_clinicId != newClinicId) {
//       updateClinicId(newClinicId);
//     }
//   }

//   // Dispose method to remove listener when no longer needed
//   @override
//   void dispose() {
//     ClinicSelection.instance.removeListener(_onClinicChanged);
//     super.dispose();
//   }

//   CollectionReference get _patientsCollection {
//     devtools.log("Accessing patients collection for clinicId: $_clinicId");
//     return firestore
//         .collection('clinics')
//         .doc(_clinicId)
//         .collection('patients');
//   }

//   //----------------------------------------------------------------------------//

//   Future<String> addPatient(
//     String patientName,
//     String gender,
//     int age,
//     String patientMobileNumber,
//     String? patientPicUrl,
//   ) async {
//     try {
//       //print('_patientsCollection this time is : $_patientsCollection');
//       print('**** addPatient defined inside PatientService is invoked ****');
//       print('**** _patientsCollection is $_patientsCollection ******');
//       print('**** newPatientRef is ${_patientsCollection.doc()} ****');
//       devtools.log(
//           'Adding new patient: This is coming from addPatient inside patient service');
//       devtools.log('Name: $patientName');
//       devtools.log('Gender: $gender');
//       devtools.log('Age: $age');
//       devtools.log('patientMobileNumber: $patientMobileNumber');
//       devtools.log('Clinic ID: $clinicId');

//       final uhid = await generateUhid(
//           clinicId); // Generate the unique uhid for the patient
//       devtools.log('this uhid is just generated by _generateUhid method $uhid');
//       print(
//           '**** this uhid is just generated by _generateUhid method $uhid ****');

//       final patientData = {
//         'patientName': patientName,
//         'gender': gender,
//         'age': age,
//         'patientMobileNumber': patientMobileNumber,
//         'uhid': uhid,
//         'patientPicUrl': patientPicUrl, // Save the image URL in Firestore
//         'doctorId': doctorId,
//         'clinicId': clinicId,
//       };
//       devtools.log('Creating a new document reference...');

//       final newPatientRef =
//           _patientsCollection.doc(); // Firestore will generate a unique ID
//       print('**** newPatientRef is $newPatientRef ****');
//       final newPatientId = newPatientRef.id; // Get the generated ID
//       print('**** newPatientId is $newPatientId ****');
//       patientData['patientId'] =
//           newPatientId; // Assign the ID to the patientData
//       devtools.log('patientData is $patientData');
//       print('patientData is $patientData');

//       try {
//         devtools.log(
//             'this is coming from inside the try block before await newPatientRef.set(patientData);');
//         devtools.log('Setting patient data: $patientData...');
//         print(
//             'this is coming from inside the try block before await newPatientRef.set(patientData);');
//         print('Setting patient data: $patientData...');
//         await newPatientRef.set(patientData);
//       } catch (e) {
//         devtools.log('error in pushing data due to $e');
//         print('error in pushing data due to $e');
//       }
//       // await newPatientRef.set(patientData);
//       devtools.log('newPatientRef is $newPatientRef');
//       print('**** newPatientRef is $newPatientRef ****');
//       print('**** newPatientId is $newPatientId ****');
//       // Return the ID of the newly created patient
//       return newPatientId; // Return the generated ID
//     } catch (e) {
//       devtools.log('Error while adding patient: $e');
//       print('**** Error while adding patient: $e ****');
//       return ''; // Return an empty string if there was an error
//     }
//   }

//   // Update an existing patient in Firestore
//   Future<void> updatePatient(String patientId, String patientName,
//       String gender, int age, String patientMobileNumber) async {
//     final patientData = {
//       'patientName': patientName,
//       'gender': gender,
//       'age': age,
//       'patientMobileNumber': patientMobileNumber,
//     };
//     await _patientsCollection.doc(patientId).update(patientData);
//   }

//   // Get all patients from Firestore
//   Future<List<Map<String, dynamic>>> getAllPatients() async {
//     final snapshot = await _patientsCollection.get();
//     return snapshot.docs
//         .map((doc) => doc.data() as Map<String, dynamic>)
//         .toList();
//   }

//   Future<String> generateUhid(String clinicId) async {
//     print('**** generateUhid defined inside PatientService invoked ****');
//     final clinicRef = firestore
//         .collection('clinics')
//         .doc(clinicId); // Use the injected instance
//     final uhidRef = clinicRef.collection('uhids').doc('current');

//     // Use a transaction to get the current uhid value and increment it
//     return firestore.runTransaction((transaction) async {
//       final doc = await transaction.get(uhidRef);
//       final currentUhid = doc.exists ? doc.data()!['value'] : 0;
//       final newUhid = currentUhid + 1;
//       transaction.set(uhidRef, {'value': newUhid});
//       return newUhid.toString().padLeft(6, '0'); // Convert to 6-digit string
//     });
//   }

//   //-----------------------------------------------------------------------//

//   Future<void> searchPatient(String patientName) async {
//     print(
//         '**** searchPatient defined inside PatientService invoked with patientName $patientName .  ****');

//     try {
//       print('**** Performing Firestore query... ****');
//       final querySnapshot = await _patientsCollection
//           .where('patientName', isEqualTo: patientName)
//           .get();
//       print('**** searchPatient: _patientsCollection called ****');

//       print('****  querySnapshot is $querySnapshot ****');

//       if (querySnapshot.docs.isNotEmpty) {
//         final patientId = querySnapshot.docs.first.id;
//         print(
//             '**** querySnapshot.doc is not empty. patientId is $patientId ****');

//         // Increment the searchCount for the found patient
//         await incrementSearchCount(patientId);
//       } else {
//         // Handle case when no patient is found with the given name
//         devtools.log('No patient found with name: $patientName');
//       }
//     } catch (e) {
//       devtools.log('Error while searching patient: $e');
//     }
//   }

//   // Get a single patient from Firestore by patientId
//   Future<Map<String, dynamic>?> getPatientById(String patientId) async {
//     if (patientId.isEmpty) {
//       return null; // Return early if patientId is empty
//     }

//     final patientRef = _patientsCollection.doc(patientId);

//     // Use a transaction to increment the searchCount and get patient data
//     // return FirebaseFirestore.instance.runTransaction((transaction) async {
//     //   final doc = await transaction.get(patientRef);
//     return firestore.runTransaction((transaction) async {
//       final doc = await transaction.get(patientRef);

//       if (doc.exists) {
//         // Increment the searchCount
//         final currentSearchCount =
//             (doc.data() as Map<String, dynamic>)['searchCount'] ?? 0;
//         transaction.update(patientRef, {'searchCount': currentSearchCount + 1});

//         // Return the patient data
//         return doc.data() as Map<String, dynamic>?;
//       } else {
//         return null; // Patient not found
//       }
//     });
//   }

//   Future<void> incrementSearchCount(String patientId) async {
//     print(
//         '**** incrementSearchCount defined inside PatientService invoked with patientId $patientId ****');
//     devtools
//         .log('Welcome inside incrementSearchCount. patientId is $patientId');
//     //--------------------------------------------------------------------------//
//     print('**** _patientsCollection is $_patientsCollection ****');
//     DocumentReference patientDoc = _patientsCollection.doc(patientId);
//     print('**** patientDoc after creation is $patientDoc ****');

//     //--------------------------------------------------------------------------//

//     devtools.log('patientDoc  is $patientDoc');

//     devtools.log('patientDoc path is ${patientDoc.path}');

//     // Use a transaction to ensure atomicity
//     // await FirebaseFirestore.instance.runTransaction((transaction) async {
//     await firestore.runTransaction((transaction) async {
//       devtools.log('Starting transaction for patientId $patientId');
//       print('**** Starting transaction for patientId $patientId ****');

//       DocumentSnapshot snapshot = await transaction.get(patientDoc);
//       devtools.log('snapshot exists: ${snapshot.exists}');
//       devtools.log('snapshot data: ${snapshot.data()}');
//       print('**** snapshot exists: ${snapshot.exists} ****');
//       print('**** snsnapshot data: ${snapshot.data()} ****');

//       if (!snapshot.exists) {
//         devtools.log('Patient does not exist!');
//         print('**** Patient does not exist! ****');
//         throw Exception("Patient does not exist!");
//       }

//       // Ensure you are using the correct field name here
//       int currentCount = snapshot.get('searchCount') ?? 0;
//       devtools.log('Current search count is $currentCount');
//       print('**** Current search count is $currentCount ****');
//       transaction.update(patientDoc, {'searchCount': currentCount + 1});

//       devtools.log('incremented Search count is ${currentCount + 1}');
//       print('**** incremented Search count is ${currentCount + 1} ****');
//     }).then((_) {
//       devtools.log('Transaction completed successfully');
//       print('**** Transaction completed successfully ****');
//     }).catchError((error) {
//       devtools.log('Transaction failed with error: $error');
//       print('**** Transaction failed with error: $error ****');
//     });
//   }

//   Future<List<Patient>> handleSearchInput(String query) async {
//     try {
//       final querySnapshot = await _patientsCollection
//           .where('patientName', isEqualTo: query)
//           .get();

//       if (querySnapshot.docs.isNotEmpty) {
//         final patientData =
//             querySnapshot.docs.first.data() as Map<String, dynamic>?;
//         final patientList = <Patient>[];

//         if (patientData != null) {
//           final searchedPatient = Patient(
//             patientId: querySnapshot.docs.first.id,
//             age: patientData['age'] as int? ?? 0,
//             gender: patientData['gender'] as String? ?? '',
//             patientName: patientData['patientName'] as String? ?? '',
//             patientMobileNumber:
//                 patientData['patientMobileNumber'] as String? ?? '',
//             patientPicUrl: patientData['patientPicUrl'] as String? ?? '',
//             uhid: patientData['uhid'] as String? ?? '',
//             clinicId: patientData['clinicId'] as String? ?? '',
//             doctorId: patientData['doctorId'] as String? ?? '',
//             searchCount: patientData['searchCount'] as int? ?? 0,
//           );

//           // Increment the searchCount for the found patient
//           //await incrementSearchCount(searchedPatient.patientId);

//           // Add the patient to the list
//           patientList.add(searchedPatient);
//         }

//         return patientList;
//       } else {
//         return []; // Return an empty list if no patient is found
//       }
//     } catch (e) {
//       devtools.log('Error handling search input: $e');
//       return []; // Return an empty list in case of an error
//     }
//   }

//   Stream<List<Patient>> searchPatientsForCurrentUserRealTime(
//       String userInput, Patient? selectedPatient) {
//     final patientsCollection =
//         _patientsCollection.where('doctorId', isEqualTo: doctorId);

//     return patientsCollection.snapshots().asyncMap((snapshot) async {
//       final matchingPatients = <Patient>[];

//       for (final doc in snapshot.docs) {
//         final data = doc.data() as Map<String, dynamic>?;

//         if (data != null) {
//           final patientName =
//               (data['patientName'] as String?)?.toLowerCase() ?? '';
//           final patientMobileNumber =
//               (data['patientMobileNumber'] as String?) ?? '';

//           if (patientName.contains(userInput.toLowerCase()) ||
//               patientMobileNumber.contains(userInput)) {
//             // Create a Patient instance
//             final patient = Patient(
//               patientId: doc.id,
//               age: data['age'] as int? ?? 0,
//               gender: data['gender'] as String? ?? '',
//               patientName: data['patientName'] as String? ?? '',
//               patientMobileNumber: data['patientMobileNumber'] as String? ?? '',
//               patientPicUrl: data['patientPicUrl'] as String? ?? '',
//               uhid: data['uhid'] as String? ?? '',
//               clinicId: data['clinicId'] as String? ?? '',
//               doctorId: data['doctorId'] as String? ?? '',
//               searchCount: data['searchCount'] as int? ?? 0,
//             );

//             // Add the patient to the list
//             matchingPatients.add(patient);
//           }
//         }
//       }

//       return matchingPatients;
//     });
//   }

//   //-------------------------------------------------------------------------//

//   Stream<List<Patient>> searchPatientsRealTime(
//       String userInput, String clinicId) {
//     final patientsCollection = _patientsCollection;

//     // Filter patients by clinicId
//     final query = patientsCollection.where('clinicId', isEqualTo: clinicId);

//     return query.snapshots().asyncMap((snapshot) async {
//       final matchingPatients = <Patient>[];

//       for (final doc in snapshot.docs) {
//         final data = doc.data() as Map<String, dynamic>?;

//         if (data != null) {
//           final patientName =
//               (data['patientName'] as String?)?.toLowerCase() ?? '';
//           final patientMobileNumber = data['patientMobileNumber'] ?? '';

//           // Check if the patient name or mobile number matches the input query
//           if (patientName.contains(userInput.toLowerCase()) ||
//               patientMobileNumber.contains(userInput)) {
//             final patient = Patient(
//               patientId: doc.id,
//               age: data['age'] as int? ?? 0,
//               gender: data['gender'] as String? ?? '',
//               patientName: data['patientName'] as String? ?? '',
//               patientMobileNumber: data['patientMobileNumber'] as String? ?? '',
//               patientPicUrl: data['patientPicUrl'] as String? ?? '',
//               uhid: data['uhid'] as String? ?? '',
//               clinicId: data['clinicId'] as String? ?? '',
//               doctorId: data['doctorId'] as String? ?? '',
//               searchCount: data['searchCount'] as int? ?? 0,
//             );

//             matchingPatients.add(patient);
//           }
//         }
//       }

//       return matchingPatients;
//     });
//   }

//   //-------------------------------------------------------------------------//

//   Stream<List<Patient>> getAllPatientsForCurrentUserRealTime() {
//     final patientsCollection =
//         _patientsCollection.where('doctorId', isEqualTo: doctorId);

//     return patientsCollection.snapshots().asyncMap((snapshot) async {
//       final Map<String, List<Patient>> patientsByAlphabet = {};

//       for (final doc in snapshot.docs) {
//         final data = doc.data() as Map<String, dynamic>?;

//         if (data != null) {
//           final patient = Patient(
//             patientId: doc.id,
//             age: data['age'] as int? ?? 0,
//             gender: data['gender'] as String? ?? '',
//             patientName: data['patientName'] as String? ?? '',
//             patientMobileNumber: data['patientMobileNumber'] as String? ?? '',
//             patientPicUrl: data['patientPicUrl'] as String? ?? '',
//             uhid: data['uhid'] as String? ?? '',
//             clinicId: data['clinicId'] as String? ?? '',
//             doctorId: data['doctorId'] as String? ?? '',
//             searchCount: data['searchCount'] as int? ?? 0,
//           );

//           final patientFirstChar =
//               patient.patientName.isNotEmpty ? patient.patientName[0] : '';

//           // Group patients by their first character
//           patientsByAlphabet.putIfAbsent(patientFirstChar, () => []);
//           patientsByAlphabet[patientFirstChar]!.add(patient);
//         }
//       }

//       // Sort the list by first characters
//       final sortedPatients = patientsByAlphabet.entries.toList()
//         ..sort((a, b) => a.key.compareTo(b.key));

//       // Flatten the list
//       final allPatients =
//           sortedPatients.expand((entry) => entry.value).toList();

//       return allPatients;
//     });
//   }

//   //-------------------------------------------------------------------------//

//   Stream<List<Patient>> getAllPatientsRealTime({String? clinicId}) {
//     final patientsCollection = _patientsCollection;
//     // Log the clinicId being used for filtering
//     devtools.log(
//         "**** Welcome inside getAllPatientsRealTime defined in PatientService. Fetching all patients for clinicId: $clinicId");

//     // Apply clinicId filter if provided
//     final query = clinicId != null && clinicId.isNotEmpty
//         ? patientsCollection.where('clinicId', isEqualTo: clinicId)
//         : patientsCollection;

//     return query.snapshots().asyncMap((snapshot) async {
//       devtools.log("**** Snapshot received with ${snapshot.size} documents.");
//       if (snapshot.size == 0) {
//         devtools.log("**** No documents found for clinicId: $clinicId");
//       }
//       final allPatients = snapshot.docs
//           .map((doc) {
//             final data = doc.data() as Map<String, dynamic>?;

//             // Add a debug statement to ensure data exists
//             if (data == null || data.isEmpty) {
//               devtools
//                   .log("**** No data found for document with ID: ${doc.id}");
//               return null;
//             } else {
//               devtools.log("**** Document data for patient ${doc.id}: $data");
//             }

//             // Create Patient object if data is not null
//             try {
//               devtools.log("**** Document data for patient ${doc.id}: $data");
//               final patient = Patient(
//                 patientId: doc.id,
//                 age: data['age'] as int? ?? 0,
//                 gender: data['gender'] as String? ?? '',
//                 patientName: data['patientName'] as String? ?? '',
//                 patientMobileNumber:
//                     data['patientMobileNumber'] as String? ?? '',
//                 patientPicUrl: data['patientPicUrl'] as String? ?? '',
//                 uhid: data['uhid'] as String? ?? '',
//                 clinicId: data['clinicId'] as String? ?? '',
//                 doctorId: data['doctorId'] as String? ?? '',
//                 searchCount: data['searchCount'] as int? ?? 0,
//               );
//               return patient;
//             } catch (e) {
//               devtools.log(
//                   "**** Error creating Patient object for document ${doc.id}: $e");
//               return null;
//             }
//           })
//           .whereType<Patient>()
//           .toList();

//       // Log the list of patient IDs for verification
//       devtools.log(
//           "**** All Patients Retrieved: ${allPatients.map((p) => p.patientId).toList()}");

//       // Sort patients alphabetically by name
//       allPatients.sort((a, b) => a.patientName.compareTo(b.patientName));
//       return allPatients;
//     });
//   }

//   //-------------------------------------------------------------------------//

//   Future<String> uploadPatientImage(File image, String patientId) async {
//     try {
//       print("**** uploadPatientImage invoked ****");
//       // Generate a unique filename for the image
//       final fileName = 'patient_images/$patientId/${const Uuid().v4()}';
//       print("**** FileName generated: $fileName ****");

//       // Upload the image to Firebase Storage
//       // await FirebaseStorage.instance.ref(fileName).putFile(image);
//       await storage.ref(fileName).putFile(image);
//       print("**** putFile method called ****");

//       // Get the download URL of the uploaded image
//       // final imageUrl =
//       //     await FirebaseStorage.instance.ref(fileName).getDownloadURL();
//       final imageUrl = await storage.ref(fileName).getDownloadURL();
//       print("**** getDownloadURL method called, URL: $imageUrl ****");

//       return imageUrl;
//     } catch (error) {
//       print("**** Error uploading image: $error ****");
//       devtools.log('Error uploading image: $error');
//       throw Exception('Error uploading image');
//     }
//   }

//   Future<void> updatePatientImage(String patientId, String imageUrl) async {
//     try {
//       // Update the patient document in Firestore with the image URL
//       //
//       await firestore
//           .collection('clinics')
//           .doc(clinicId)
//           .collection('patients')
//           .doc(patientId)
//           .update({'patientPicUrl': imageUrl});
//     } catch (error) {
//       devtools.log('Error updating patient image URL: $error');
//       throw Exception('Error updating patient image URL');
//     }
//   }

//   //----------------------------------------------------------//
//   Future<List<Map<String, dynamic>>> fetchRecentPatients({
//     //required String doctorId,
//     required String clinicId,
//   }) async {
//     devtools.log('_fetchRecentPatients invoked');
//     try {
//       // final clinicsCollection =
//       //     FirebaseFirestore.instance.collection('clinics');
//       final clinicsCollection = firestore.collection('clinics');
//       final patientsQuerySnapshot = await clinicsCollection
//           .doc(clinicId)
//           .collection('patients')
//           .orderBy('searchCount', descending: true)
//           .limit(4)
//           .get();

//       final recentPatientsData = <Map<String, dynamic>>[];

//       for (final patientDoc in patientsQuerySnapshot.docs) {
//         final patientData = patientDoc.data();
//         if (patientData.isNotEmpty) {
//           recentPatientsData.add(patientData);
//         }
//       }

//       return recentPatientsData;
//     } catch (e) {
//       // Handle error
//       devtools.log('Error fetching recent patients: $e');
//       return []; // Return an empty list in case of an error
//     }
//   }

//   //----------------------------------------------------------//

//   Future<void> restorePatient(Patient patient) async {
//     try {
//       final patientData =
//           patient.toMap(); // Convert the patient object to a map
//       // final clinicRef = FirebaseFirestore.instance
//       final clinicRef = firestore.collection('clinics').doc(patient.clinicId);
//       final patientsRef =
//           clinicRef.collection('patients').doc(patient.patientId);
//       await patientsRef.set(patientData); // Restore the patient document
//     } catch (e) {
//       devtools.log('Error restoring patient: $e');
//       // throw e; // Rethrow the error to be handled by the caller
//       rethrow;
//     }
//   }

//   //--------------------------------------------------------------------------//

//   Future<void> deletePatient(String patientId, String doctorName) async {
//     final AppointmentService appointmentService = AppointmentService();
//     try {
//       final patientRef = _patientsCollection.doc(patientId);

//       // Fetch the patient's profile picture URL
//       final patientSnapshot = await patientRef.get();
//       final patientData = patientSnapshot.data() as Map<String, dynamic>?;
//       final profilePicUrl = patientData?['patientPicUrl'] as String?;

//       // Fetch treatment picture URLs
//       final treatmentsSnapshot =
//           await patientRef.collection('treatments').get();

//       final List<String> treatmentPictureUrls = [];

//       // Fetch pictures for each treatment document
//       for (final treatmentDoc in treatmentsSnapshot.docs) {
//         final picturesSnapshot =
//             await treatmentDoc.reference.collection('pictures').get();
//         final pictureUrls = picturesSnapshot.docs
//             .map((doc) => doc.data()['picUrl'] as String?)
//             .where((url) => url != null && url.isNotEmpty)
//             .cast<String>()
//             .toList();
//         treatmentPictureUrls.addAll(pictureUrls);
//       }

//       // Capture appointment IDs and details
//       final appointmentsSnapshot =
//           await patientRef.collection('appointments').get();
//       final appointments = appointmentsSnapshot.docs.map((doc) {
//         return {
//           'appointmentId': doc['appointmentId'],
//           'appointmentDate': (doc['date'] as Timestamp).toDate(),
//         };
//       }).toList();
//       devtools.log('appointments found are $appointments');

//       // Delete patient's appointments sub-collection
//       await deleteCollection(patientRef.collection('appointments'), 20);

//       // Reference to main appointments collection
//       final mainAppointmentsCollection = appointmentService.clinicsCollection
//           .doc(clinicId)
//           .collection('appointments');

//       for (var appointment in appointments) {
//         // Delete from main appointments collection
//         final snapshot = await mainAppointmentsCollection
//             .where('appointmentId', isEqualTo: appointment['appointmentId'])
//             .get();

//         for (final doc in snapshot.docs) {
//           devtools.log('doc');

//           final appointmentSlot = doc['slot'];

//           await doc.reference.delete();

//           // Update slots for future appointments
//           if (appointment['appointmentDate'].isAfter(DateTime.now())) {
//             await appointmentService.updateSlot(
//               clinicId,
//               doctorName,
//               appointment['appointmentDate'],
//               appointmentSlot,
//             );
//           }
//         }
//       }

//       // Delete other sub-collections under treatments
//       for (final treatmentDoc in treatmentsSnapshot.docs) {
//         await deleteCollection(treatmentDoc.reference.collection('notes'), 20);
//         await deleteCollection(
//             treatmentDoc.reference.collection('payments'), 20);
//         await deleteCollection(
//             treatmentDoc.reference.collection('prescriptions'), 20);
//         await deleteCollection(
//             treatmentDoc.reference.collection('pictures'), 20);
//         await treatmentDoc.reference.delete();
//       }

//       // Delete the patient document
//       await patientRef.delete();

//       // Delete pictures from storage
//       final List<String> allPictureUrls = [];
//       if (profilePicUrl != null && profilePicUrl.isNotEmpty) {
//         allPictureUrls.add(profilePicUrl);
//       }
//       allPictureUrls.addAll(treatmentPictureUrls);

//       // Call the _deletePicturesFromStorage with the valid URLs
//       await deletePicturesFromStorage(allPictureUrls);
//     } catch (e) {
//       throw Exception('Error deleting patient: $e');
//     }
//   }

//   Future<void> deleteCollection(
//       CollectionReference collectionRef, int batchSize) async {
//     devtools.log('Welcome inside _deleteCollection');
//     QuerySnapshot snapshot;
//     do {
//       snapshot = await collectionRef.limit(batchSize).get();
//       for (DocumentSnapshot doc in snapshot.docs) {
//         await doc.reference.delete();
//       }
//     } while (snapshot.size == batchSize);
//   }

//   Future<void> deletePicturesFromStorage(List<String> urls) async {
//     // Assuming `urls` is a List<String>, there's no need to check for null
//     final validUrls = urls.where((url) => url.isNotEmpty).toList();

//     if (validUrls.isEmpty) {
//       devtools.log('No valid URLs to delete from storage.');
//       return; // Return early if there are no valid URLs
//     }

//     //final storage = FirebaseStorage.instance;

//     for (final url in validUrls) {
//       try {
//         final path = extractFilePathFromUrl(url);
//         final ref = storage.ref().child(path);
//         await ref.delete();
//         devtools.log('Deleted picture from storage: $url');
//       } catch (error) {
//         devtools.log('Error deleting picture from storage: $error');
//       }
//     }
//   }

//   String extractFilePathFromUrl(String url) {
//     final Uri uri = Uri.parse(url);
//     final path = uri.path.replaceFirst('/v0/b/', '');
//     final pathSegments = path.split('/o/');
//     return pathSegments[1].split('?').first.replaceAll('%2F', '/');
//   }

//   //--------------------------------------------------------------------------//
//   // Add this method to your PatientService class
//   Future<List<Patient>> getPatientsBySearch(String? query) async {
//     devtools.log(
//         '@@@@@@@@@@@@  Welcome to getPatientsBySearch ! clinicId is $clinicId and doctorId is $doctorId @@@@@@@@@@@@');
//     try {
//       // bool isNumeric = double.tryParse(query) != null;
//       if (query == null || query.isEmpty) {
//         return [];
//       }

//       bool isNumeric = double.tryParse(query) != null;

//       QuerySnapshot querySnapshot;

//       // Fetch patients by doctorId
//       // final patientsCollection = FirebaseFirestore.instance
//       final patientsCollection =
//           firestore.collection('clinics').doc(clinicId).collection('patients');

//       querySnapshot =
//           await patientsCollection.where('doctorId', isEqualTo: doctorId).get();

//       // Prepare an empty list to hold matching patients
//       List<Patient> matchingPatients = [];

//       for (var doc in querySnapshot.docs) {
//         final data = doc.data() as Map<String, dynamic>;
//         final patientName = data['patientName'].toString().toLowerCase();
//         final patientMobileNumber = data['patientMobileNumber'].toString();

//         // Perform search logic: Match either by patient name (contains) or mobile number
//         if (isNumeric) {
//           if (patientMobileNumber.contains(query)) {
//             matchingPatients.add(Patient(
//               patientId: doc.id,
//               patientName: data['patientName'] ?? '',
//               patientMobileNumber: data['patientMobileNumber'] ?? '',
//               age: data['age'] ?? 0,
//               gender: data['gender'] ?? '',
//               patientPicUrl: data['patientPicUrl'] ?? '',
//               uhid: data['uhid'] ?? '',
//               clinicId: clinicId,
//               doctorId: doctorId,
//               searchCount: data['searchCount'] ?? 0,
//             ));
//           }
//         } else {
//           if (patientName.contains(query.toLowerCase())) {
//             matchingPatients.add(Patient(
//               patientId: doc.id,
//               patientName: data['patientName'] ?? '',
//               patientMobileNumber: data['patientMobileNumber'] ?? '',
//               age: data['age'] ?? 0,
//               gender: data['gender'] ?? '',
//               patientPicUrl: data['patientPicUrl'] ?? '',
//               uhid: data['uhid'] ?? '',
//               clinicId: clinicId,
//               doctorId: doctorId,
//               searchCount: data['searchCount'] ?? 0,
//             ));
//           }
//         }
//       }

//       return matchingPatients;
//     } catch (e) {
//       devtools.log('Error searching patients: $e');
//       return [];
//     }
//   }

//   //---------------------------------------------------------------------------//
//   Future<List<Patient>> getPatientsBySearchForCurrentUser(String? query) async {
//     devtools.log('Welcome to getPatientsBySearchForCurrentUser !');
//     print('**** Welcome to getPatientsBySearchForCurrentUser ! ****');

//     try {
//       if (query == null || query.isEmpty) {
//         print('**** query is null or empty ! ****');
//         return [];
//       }

//       bool isNumeric = double.tryParse(query) != null;

//       //QuerySnapshot querySnapshot;

//       // Fetch patients by doctorId and search by name or mobile number
//       // final patientsCollection = FirebaseFirestore.instance
//       final patientsCollection = firestore
//           .collection('clinics')
//           .doc(clinicId)
//           .collection('patients')
//           .where('doctorId', isEqualTo: doctorId); // Include doctorId filter

//       // Process snapshot and filter results
//       final snapshot = await patientsCollection.get();
//       final List<Patient> matchingPatients = [];
//       print(
//           '**** patientsCollection is $patientsCollection, snapshot is $snapshot ****');

//       for (final doc in snapshot.docs) {
//         print('**** doc in snapshot is $doc ****');
//         final data = doc.data() as Map<String, dynamic>;
//         final patientName = data['patientName'].toString().toLowerCase();
//         print(
//             '**** Comparing "$patientName" with query "${query.toLowerCase()}" ****');

//         final patientMobileNumber = data['patientMobileNumber'].toString();
//         print('**** Comparing "$patientMobileNumber" with query "$query" ****');

//         print('**** Comparing "$patientName" with "$query" ****');

//         if (isNumeric) {
//           if (patientMobileNumber.contains(query)) {
//             print(
//                 '**** Found matching patient by mobile: ${data['patientName']}****');
//             matchingPatients.add(Patient.fromJson(data));
//           }
//         } else {
//           if (patientName.contains(query.toLowerCase())) {
//             print(
//                 '**** Found matching patient by name: ${data['patientName']} ****');
//             matchingPatients.add(Patient.fromJson(data));
//           }
//         }
//       }

//       return matchingPatients;
//     } catch (e) {
//       devtools.log('Error searching patients: $e');
//       print('**** Error searching patients: $e ****');
//       return [];
//     }
//   }

//   //--------------------------------------------------------------------------//
//   // Method to listen to recent patients (Top 4 by searchCount)
//   Stream<List<Map<String, dynamic>>> listenToTopRecentPatients(
//       String clinicId) {
//     // return FirebaseFirestore.instance
//     return firestore
//         .collection('clinics')
//         .doc(clinicId)
//         .collection('patients')
//         .orderBy('searchCount', descending: true)
//         .limit(4)
//         .snapshots()
//         .map((snapshot) {
//       return snapshot.docs.map((doc) => doc.data()).toList();
//     });
//   }

//   // Method to listen to changes in all patients to monitor their searchCount
//   Stream<List<Map<String, dynamic>>> listenToAllPatients(String clinicId) {
//     // return FirebaseFirestore.instance
//     return firestore
//         .collection('clinics')
//         .doc(clinicId)
//         .collection('patients')
//         .snapshots()
//         .map((snapshot) {
//       return snapshot.docs.map((doc) => doc.data()).toList();
//     });
//   }

//   //--------------------------------------------------------------------------//
// }

// // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! //
// // CODE BELOW STABLE BEFORE INTRODUCING PROVIDER FOR PATIENTSERVICE
// import 'dart:io';
// import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:firebase_storage/firebase_storage.dart';
// import 'package:neocare_dental_app/firestore/appointment_service.dart';
// import 'dart:developer' as devtools show log;
// import 'package:neocare_dental_app/mywidgets/patient.dart';
// import 'package:uuid/uuid.dart';

// class PatientService {
//   final String clinicId;
//   final String doctorId;
//   final FirebaseFirestore firestore;
//   final FirebaseStorage storage;

//   // PatientService(
//   //   this.clinicId,
//   //   this.doctorId,
//   //   FirebaseFirestore? firestoreInstance, this.firestore,
//   // );
//   // Constructor with a default value for firestore
//   PatientService(
//     this.clinicId,
//     this.doctorId, {
//     FirebaseFirestore? firestoreInstance,
//     FirebaseStorage? storageInstance,
//   })  : firestore = firestoreInstance ?? FirebaseFirestore.instance,
//         storage = storageInstance ?? FirebaseStorage.instance;

//   //----------------------------------------------------------------------------//
//   // CollectionReference get _patientsCollection => FirebaseFirestore.instance
//   //     .collection('clinics')
//   //     .doc(clinicId)
//   //     .collection('patients');

//   // factory PatientService.withClinicId(String clinicId, String doctorId) {
//   //   return PatientService(clinicId, doctorId);
//   // }

//   // Use the injected firestore instance here

//   CollectionReference get _patientsCollection {
//     devtools.log("**** Accessing patients collection for clinicId: $clinicId");
//     return firestore.collection('clinics').doc(clinicId).collection('patients');
//   }

//   factory PatientService.withClinicId(String clinicId, String doctorId) {
//     return PatientService(clinicId, doctorId);
//   }
//   //----------------------------------------------------------------------------//

//   Future<String> addPatient(
//     String patientName,
//     String gender,
//     int age,
//     String patientMobileNumber,
//     String? patientPicUrl,
//   ) async {
//     try {
//       //print('_patientsCollection this time is : $_patientsCollection');
//       print('**** addPatient defined inside PatientService is invoked ****');
//       print('**** _patientsCollection is $_patientsCollection ******');
//       print('**** newPatientRef is ${_patientsCollection.doc()} ****');
//       devtools.log(
//           'Adding new patient: This is coming from addPatient inside patient service');
//       devtools.log('Name: $patientName');
//       devtools.log('Gender: $gender');
//       devtools.log('Age: $age');
//       devtools.log('patientMobileNumber: $patientMobileNumber');
//       devtools.log('Clinic ID: $clinicId');

//       final uhid = await generateUhid(
//           clinicId); // Generate the unique uhid for the patient
//       devtools.log('this uhid is just generated by _generateUhid method $uhid');
//       print(
//           '**** this uhid is just generated by _generateUhid method $uhid ****');

//       final patientData = {
//         'patientName': patientName,
//         'gender': gender,
//         'age': age,
//         'patientMobileNumber': patientMobileNumber,
//         'uhid': uhid,
//         'patientPicUrl': patientPicUrl, // Save the image URL in Firestore
//         'doctorId': doctorId,
//         'clinicId': clinicId,
//       };
//       devtools.log('Creating a new document reference...');

//       final newPatientRef =
//           _patientsCollection.doc(); // Firestore will generate a unique ID
//       print('**** newPatientRef is $newPatientRef ****');
//       final newPatientId = newPatientRef.id; // Get the generated ID
//       print('**** newPatientId is $newPatientId ****');
//       patientData['patientId'] =
//           newPatientId; // Assign the ID to the patientData
//       devtools.log('patientData is $patientData');
//       print('patientData is $patientData');

//       try {
//         devtools.log(
//             'this is coming from inside the try block before await newPatientRef.set(patientData);');
//         devtools.log('Setting patient data: $patientData...');
//         print(
//             'this is coming from inside the try block before await newPatientRef.set(patientData);');
//         print('Setting patient data: $patientData...');
//         await newPatientRef.set(patientData);
//       } catch (e) {
//         devtools.log('error in pushing data due to $e');
//         print('error in pushing data due to $e');
//       }
//       // await newPatientRef.set(patientData);
//       devtools.log('newPatientRef is $newPatientRef');
//       print('**** newPatientRef is $newPatientRef ****');
//       print('**** newPatientId is $newPatientId ****');
//       // Return the ID of the newly created patient
//       return newPatientId; // Return the generated ID
//     } catch (e) {
//       devtools.log('Error while adding patient: $e');
//       print('**** Error while adding patient: $e ****');
//       return ''; // Return an empty string if there was an error
//     }
//   }

//   // Update an existing patient in Firestore
//   Future<void> updatePatient(String patientId, String patientName,
//       String gender, int age, String patientMobileNumber) async {
//     final patientData = {
//       'patientName': patientName,
//       'gender': gender,
//       'age': age,
//       'patientMobileNumber': patientMobileNumber,
//     };
//     await _patientsCollection.doc(patientId).update(patientData);
//   }

//   // Get all patients from Firestore
//   Future<List<Map<String, dynamic>>> getAllPatients() async {
//     final snapshot = await _patientsCollection.get();
//     return snapshot.docs
//         .map((doc) => doc.data() as Map<String, dynamic>)
//         .toList();
//   }

//   // Future<String> generateUhid(String clinicId) async {
//   //   final clinicRef =
//   //       FirebaseFirestore.instance.collection('clinics').doc(clinicId);
//   //   final uhidRef = clinicRef.collection('uhids').doc('current');

//   //   // Use a transaction to get the current uhid value and increment it
//   //   return FirebaseFirestore.instance.runTransaction((transaction) async {
//   //     final doc = await transaction.get(uhidRef);
//   //     final currentUhid = doc.exists ? doc.data()!['value'] : 0;
//   //     final newUhid = currentUhid + 1;
//   //     transaction.set(uhidRef, {'value': newUhid});
//   //     return newUhid.toString().padLeft(6, '0'); // Convert to 6-digit string
//   //   });
//   // }
//   Future<String> generateUhid(String clinicId) async {
//     print('**** generateUhid defined inside PatientService invoked ****');
//     final clinicRef = firestore
//         .collection('clinics')
//         .doc(clinicId); // Use the injected instance
//     final uhidRef = clinicRef.collection('uhids').doc('current');

//     // Use a transaction to get the current uhid value and increment it
//     return firestore.runTransaction((transaction) async {
//       final doc = await transaction.get(uhidRef);
//       final currentUhid = doc.exists ? doc.data()!['value'] : 0;
//       final newUhid = currentUhid + 1;
//       transaction.set(uhidRef, {'value': newUhid});
//       return newUhid.toString().padLeft(6, '0'); // Convert to 6-digit string
//     });
//   }

//   //-----------------------------------------------------------------------//

//   Future<void> searchPatient(String patientName) async {
//     print(
//         '**** searchPatient defined inside PatientService invoked with patientName $patientName .  ****');

//     try {
//       print('**** Performing Firestore query... ****');
//       final querySnapshot = await _patientsCollection
//           .where('patientName', isEqualTo: patientName)
//           .get();
//       print('**** searchPatient: _patientsCollection called ****');

//       print('****  querySnapshot is $querySnapshot ****');

//       if (querySnapshot.docs.isNotEmpty) {
//         final patientId = querySnapshot.docs.first.id;
//         print(
//             '**** querySnapshot.doc is not empty. patientId is $patientId ****');

//         // Increment the searchCount for the found patient
//         await incrementSearchCount(patientId);
//       } else {
//         // Handle case when no patient is found with the given name
//         devtools.log('No patient found with name: $patientName');
//       }
//     } catch (e) {
//       devtools.log('Error while searching patient: $e');
//     }
//   }

//   // Get a single patient from Firestore by patientId
//   Future<Map<String, dynamic>?> getPatientById(String patientId) async {
//     if (patientId.isEmpty) {
//       return null; // Return early if patientId is empty
//     }

//     final patientRef = _patientsCollection.doc(patientId);

//     // Use a transaction to increment the searchCount and get patient data
//     // return FirebaseFirestore.instance.runTransaction((transaction) async {
//     //   final doc = await transaction.get(patientRef);
//     return firestore.runTransaction((transaction) async {
//       final doc = await transaction.get(patientRef);

//       if (doc.exists) {
//         // Increment the searchCount
//         final currentSearchCount =
//             (doc.data() as Map<String, dynamic>)['searchCount'] ?? 0;
//         transaction.update(patientRef, {'searchCount': currentSearchCount + 1});

//         // Return the patient data
//         return doc.data() as Map<String, dynamic>?;
//       } else {
//         return null; // Patient not found
//       }
//     });
//   }

//   Future<void> incrementSearchCount(String patientId) async {
//     print(
//         '**** incrementSearchCount defined inside PatientService invoked with patientId $patientId ****');
//     devtools
//         .log('Welcome inside incrementSearchCount. patientId is $patientId');
//     //--------------------------------------------------------------------------//
//     print('**** _patientsCollection is $_patientsCollection ****');
//     DocumentReference patientDoc = _patientsCollection.doc(patientId);
//     print('**** patientDoc after creation is $patientDoc ****');

//     //--------------------------------------------------------------------------//

//     devtools.log('patientDoc  is $patientDoc');

//     devtools.log('patientDoc path is ${patientDoc.path}');

//     // Use a transaction to ensure atomicity
//     // await FirebaseFirestore.instance.runTransaction((transaction) async {
//     await firestore.runTransaction((transaction) async {
//       devtools.log('Starting transaction for patientId $patientId');
//       print('**** Starting transaction for patientId $patientId ****');

//       DocumentSnapshot snapshot = await transaction.get(patientDoc);
//       devtools.log('snapshot exists: ${snapshot.exists}');
//       devtools.log('snapshot data: ${snapshot.data()}');
//       print('**** snapshot exists: ${snapshot.exists} ****');
//       print('**** snsnapshot data: ${snapshot.data()} ****');

//       if (!snapshot.exists) {
//         devtools.log('Patient does not exist!');
//         print('**** Patient does not exist! ****');
//         throw Exception("Patient does not exist!");
//       }

//       // Ensure you are using the correct field name here
//       int currentCount = snapshot.get('searchCount') ?? 0;
//       devtools.log('Current search count is $currentCount');
//       print('**** Current search count is $currentCount ****');
//       transaction.update(patientDoc, {'searchCount': currentCount + 1});

//       devtools.log('incremented Search count is ${currentCount + 1}');
//       print('**** incremented Search count is ${currentCount + 1} ****');
//     }).then((_) {
//       devtools.log('Transaction completed successfully');
//       print('**** Transaction completed successfully ****');
//     }).catchError((error) {
//       devtools.log('Transaction failed with error: $error');
//       print('**** Transaction failed with error: $error ****');
//     });
//   }

//   Future<List<Patient>> handleSearchInput(String query) async {
//     try {
//       final querySnapshot = await _patientsCollection
//           .where('patientName', isEqualTo: query)
//           .get();

//       if (querySnapshot.docs.isNotEmpty) {
//         final patientData =
//             querySnapshot.docs.first.data() as Map<String, dynamic>?;
//         final patientList = <Patient>[];

//         if (patientData != null) {
//           final searchedPatient = Patient(
//             patientId: querySnapshot.docs.first.id,
//             age: patientData['age'] as int? ?? 0,
//             gender: patientData['gender'] as String? ?? '',
//             patientName: patientData['patientName'] as String? ?? '',
//             patientMobileNumber:
//                 patientData['patientMobileNumber'] as String? ?? '',
//             patientPicUrl: patientData['patientPicUrl'] as String? ?? '',
//             uhid: patientData['uhid'] as String? ?? '',
//             clinicId: patientData['clinicId'] as String? ?? '',
//             doctorId: patientData['doctorId'] as String? ?? '',
//             searchCount: patientData['searchCount'] as int? ?? 0,
//           );

//           // Increment the searchCount for the found patient
//           //await incrementSearchCount(searchedPatient.patientId);

//           // Add the patient to the list
//           patientList.add(searchedPatient);
//         }

//         return patientList;
//       } else {
//         return []; // Return an empty list if no patient is found
//       }
//     } catch (e) {
//       devtools.log('Error handling search input: $e');
//       return []; // Return an empty list in case of an error
//     }
//   }

//   Stream<List<Patient>> searchPatientsForCurrentUserRealTime(
//       String userInput, Patient? selectedPatient) {
//     final patientsCollection =
//         _patientsCollection.where('doctorId', isEqualTo: doctorId);

//     return patientsCollection.snapshots().asyncMap((snapshot) async {
//       final matchingPatients = <Patient>[];

//       for (final doc in snapshot.docs) {
//         final data = doc.data() as Map<String, dynamic>?;

//         if (data != null) {
//           final patientName =
//               (data['patientName'] as String?)?.toLowerCase() ?? '';
//           final patientMobileNumber =
//               (data['patientMobileNumber'] as String?) ?? '';

//           if (patientName.contains(userInput.toLowerCase()) ||
//               patientMobileNumber.contains(userInput)) {
//             // Create a Patient instance
//             final patient = Patient(
//               patientId: doc.id,
//               age: data['age'] as int? ?? 0,
//               gender: data['gender'] as String? ?? '',
//               patientName: data['patientName'] as String? ?? '',
//               patientMobileNumber: data['patientMobileNumber'] as String? ?? '',
//               patientPicUrl: data['patientPicUrl'] as String? ?? '',
//               uhid: data['uhid'] as String? ?? '',
//               clinicId: data['clinicId'] as String? ?? '',
//               doctorId: data['doctorId'] as String? ?? '',
//               searchCount: data['searchCount'] as int? ?? 0,
//             );

//             // Add the patient to the list
//             matchingPatients.add(patient);
//           }
//         }
//       }

//       return matchingPatients;
//     });
//   }

//   //-------------------------------------------------------------------------//
//   // Stream<List<Patient>> searchPatientsRealTime(
//   //     String userInput, Patient? selectedPatient) {
//   //   final patientsCollection = _patientsCollection; // No filter by doctorId

//   //   return patientsCollection.snapshots().asyncMap((snapshot) async {
//   //     final matchingPatients = <Patient>[];

//   //     for (final doc in snapshot.docs) {
//   //       final data = doc.data() as Map<String, dynamic>?;

//   //       if (data != null) {
//   //         final patientName =
//   //             (data['patientName'] as String?)?.toLowerCase() ?? '';
//   //         final patientMobileNumber =
//   //             (data['patientMobileNumber'] as String?) ?? '';

//   //         if (patientName.contains(userInput.toLowerCase()) ||
//   //             patientMobileNumber.contains(userInput)) {
//   //           // Create a Patient instance
//   //           final patient = Patient(
//   //             patientId: doc.id,
//   //             age: data['age'] as int? ?? 0,
//   //             gender: data['gender'] as String? ?? '',
//   //             patientName: data['patientName'] as String? ?? '',
//   //             patientMobileNumber: data['patientMobileNumber'] as String? ?? '',
//   //             patientPicUrl: data['patientPicUrl'] as String? ?? '',
//   //             uhid: data['uhid'] as String? ?? '',
//   //             clinicId: data['clinicId'] as String? ?? '',
//   //             doctorId: data['doctorId'] as String? ?? '',
//   //             searchCount: data['searchCount'] as int? ?? 0,
//   //           );

//   //           // Add the patient to the list
//   //           matchingPatients.add(patient);
//   //         }
//   //       }
//   //     }

//   //     return matchingPatients;
//   //   });
//   // }

//   Stream<List<Patient>> searchPatientsRealTime(
//       String userInput, String clinicId) {
//     final patientsCollection = _patientsCollection;

//     // Filter patients by clinicId
//     final query = patientsCollection.where('clinicId', isEqualTo: clinicId);

//     return query.snapshots().asyncMap((snapshot) async {
//       final matchingPatients = <Patient>[];

//       for (final doc in snapshot.docs) {
//         final data = doc.data() as Map<String, dynamic>?;

//         if (data != null) {
//           final patientName =
//               (data['patientName'] as String?)?.toLowerCase() ?? '';
//           final patientMobileNumber = data['patientMobileNumber'] ?? '';

//           // Check if the patient name or mobile number matches the input query
//           if (patientName.contains(userInput.toLowerCase()) ||
//               patientMobileNumber.contains(userInput)) {
//             final patient = Patient(
//               patientId: doc.id,
//               age: data['age'] as int? ?? 0,
//               gender: data['gender'] as String? ?? '',
//               patientName: data['patientName'] as String? ?? '',
//               patientMobileNumber: data['patientMobileNumber'] as String? ?? '',
//               patientPicUrl: data['patientPicUrl'] as String? ?? '',
//               uhid: data['uhid'] as String? ?? '',
//               clinicId: data['clinicId'] as String? ?? '',
//               doctorId: data['doctorId'] as String? ?? '',
//               searchCount: data['searchCount'] as int? ?? 0,
//             );

//             matchingPatients.add(patient);
//           }
//         }
//       }

//       return matchingPatients;
//     });
//   }

//   //-------------------------------------------------------------------------//

//   Stream<List<Patient>> getAllPatientsForCurrentUserRealTime() {
//     final patientsCollection =
//         _patientsCollection.where('doctorId', isEqualTo: doctorId);

//     return patientsCollection.snapshots().asyncMap((snapshot) async {
//       final Map<String, List<Patient>> patientsByAlphabet = {};

//       for (final doc in snapshot.docs) {
//         final data = doc.data() as Map<String, dynamic>?;

//         if (data != null) {
//           final patient = Patient(
//             patientId: doc.id,
//             age: data['age'] as int? ?? 0,
//             gender: data['gender'] as String? ?? '',
//             patientName: data['patientName'] as String? ?? '',
//             patientMobileNumber: data['patientMobileNumber'] as String? ?? '',
//             patientPicUrl: data['patientPicUrl'] as String? ?? '',
//             uhid: data['uhid'] as String? ?? '',
//             clinicId: data['clinicId'] as String? ?? '',
//             doctorId: data['doctorId'] as String? ?? '',
//             searchCount: data['searchCount'] as int? ?? 0,
//           );

//           final patientFirstChar =
//               patient.patientName.isNotEmpty ? patient.patientName[0] : '';

//           // Group patients by their first character
//           patientsByAlphabet.putIfAbsent(patientFirstChar, () => []);
//           patientsByAlphabet[patientFirstChar]!.add(patient);
//         }
//       }

//       // Sort the list by first characters
//       final sortedPatients = patientsByAlphabet.entries.toList()
//         ..sort((a, b) => a.key.compareTo(b.key));

//       // Flatten the list
//       final allPatients =
//           sortedPatients.expand((entry) => entry.value).toList();

//       return allPatients;
//     });
//   }

//   //-------------------------------------------------------------------------//
//   // Stream<List<Patient>> getAllPatientsRealTime() {
//   //   final patientsCollection = _patientsCollection; // No filter by doctorId

//   //   return patientsCollection.snapshots().asyncMap((snapshot) async {
//   //     final Map<String, List<Patient>> patientsByAlphabet = {};

//   //     for (final doc in snapshot.docs) {
//   //       final data = doc.data() as Map<String, dynamic>?;

//   //       if (data != null) {
//   //         final patient = Patient(
//   //           patientId: doc.id,
//   //           age: data['age'] as int? ?? 0,
//   //           gender: data['gender'] as String? ?? '',
//   //           patientName: data['patientName'] as String? ?? '',
//   //           patientMobileNumber: data['patientMobileNumber'] as String? ?? '',
//   //           patientPicUrl: data['patientPicUrl'] as String? ?? '',
//   //           uhid: data['uhid'] as String? ?? '',
//   //           clinicId: data['clinicId'] as String? ?? '',
//   //           doctorId: data['doctorId'] as String? ?? '',
//   //           searchCount: data['searchCount'] as int? ?? 0,
//   //         );

//   //         final patientFirstChar =
//   //             patient.patientName.isNotEmpty ? patient.patientName[0] : '';

//   //         // Group patients by their first character
//   //         patientsByAlphabet.putIfAbsent(patientFirstChar, () => []);
//   //         patientsByAlphabet[patientFirstChar]!.add(patient);
//   //       }
//   //     }

//   //     // Sort the list by first characters
//   //     final sortedPatients = patientsByAlphabet.entries.toList()
//   //       ..sort((a, b) => a.key.compareTo(b.key));

//   //     // Flatten the list
//   //     final allPatients =
//   //         sortedPatients.expand((entry) => entry.value).toList();

//   //     return allPatients;
//   //   });
//   // }

//   // Stream<List<Patient>> getAllPatientsRealTime({String? clinicId}) {
//   //   final patientsCollection = _patientsCollection;

//   //   // Apply clinicId filter if provided
//   //   final query = clinicId != null && clinicId.isNotEmpty
//   //       ? patientsCollection.where('clinicId', isEqualTo: clinicId)
//   //       : patientsCollection;

//   //   return query.snapshots().asyncMap((snapshot) async {
//   //     final allPatients = snapshot.docs
//   //         .map((doc) {
//   //           final data = doc.data() as Map<String, dynamic>?;

//   //           return data != null ? Patient.fromJson(data) : null;
//   //         })
//   //         .whereType<Patient>()
//   //         .toList();
//   //     // Log the list of patient IDs for verification
//   //     print(
//   //         "All Patients Retrieved: ${allPatients.map((p) => p.patientId).toList()}");

//   //     // Sort patients alphabetically by name
//   //     allPatients.sort((a, b) => a.patientName.compareTo(b.patientName));
//   //     return allPatients;
//   //   });
//   // }

//   Stream<List<Patient>> getAllPatientsRealTime({String? clinicId}) {
//     final patientsCollection = _patientsCollection;
//     // Log the clinicId being used for filtering
//     devtools.log(
//         "**** Welcome inside getAllPatientsRealTime defined in PatientService. Fetching all patients for clinicId: $clinicId");

//     // Apply clinicId filter if provided
//     final query = clinicId != null && clinicId.isNotEmpty
//         ? patientsCollection.where('clinicId', isEqualTo: clinicId)
//         : patientsCollection;

//     return query.snapshots().asyncMap((snapshot) async {
//       devtools.log("**** Snapshot received with ${snapshot.size} documents.");
//       if (snapshot.size == 0) {
//         devtools.log("**** No documents found for clinicId: $clinicId");
//       }
//       final allPatients = snapshot.docs
//           .map((doc) {
//             final data = doc.data() as Map<String, dynamic>?;

//             // Add a debug statement to ensure data exists
//             if (data == null || data.isEmpty) {
//               devtools
//                   .log("**** No data found for document with ID: ${doc.id}");
//               return null;
//             } else {
//               devtools.log("**** Document data for patient ${doc.id}: $data");
//             }

//             // Create Patient object if data is not null
//             try {
//               devtools.log("**** Document data for patient ${doc.id}: $data");
//               final patient = Patient(
//                 patientId: doc.id,
//                 age: data['age'] as int? ?? 0,
//                 gender: data['gender'] as String? ?? '',
//                 patientName: data['patientName'] as String? ?? '',
//                 patientMobileNumber:
//                     data['patientMobileNumber'] as String? ?? '',
//                 patientPicUrl: data['patientPicUrl'] as String? ?? '',
//                 uhid: data['uhid'] as String? ?? '',
//                 clinicId: data['clinicId'] as String? ?? '',
//                 doctorId: data['doctorId'] as String? ?? '',
//                 searchCount: data['searchCount'] as int? ?? 0,
//               );
//               return patient;
//             } catch (e) {
//               devtools.log(
//                   "**** Error creating Patient object for document ${doc.id}: $e");
//               return null;
//             }
//           })
//           .whereType<Patient>()
//           .toList();

//       // Log the list of patient IDs for verification
//       devtools.log(
//           "**** All Patients Retrieved: ${allPatients.map((p) => p.patientId).toList()}");

//       // Sort patients alphabetically by name
//       allPatients.sort((a, b) => a.patientName.compareTo(b.patientName));
//       return allPatients;
//     });
//   }

//   //-------------------------------------------------------------------------//

//   Future<String> uploadPatientImage(File image, String patientId) async {
//     try {
//       print("**** uploadPatientImage invoked ****");
//       // Generate a unique filename for the image
//       final fileName = 'patient_images/$patientId/${const Uuid().v4()}';
//       print("**** FileName generated: $fileName ****");

//       // Upload the image to Firebase Storage
//       // await FirebaseStorage.instance.ref(fileName).putFile(image);
//       await storage.ref(fileName).putFile(image);
//       print("**** putFile method called ****");

//       // Get the download URL of the uploaded image
//       // final imageUrl =
//       //     await FirebaseStorage.instance.ref(fileName).getDownloadURL();
//       final imageUrl = await storage.ref(fileName).getDownloadURL();
//       print("**** getDownloadURL method called, URL: $imageUrl ****");

//       return imageUrl;
//     } catch (error) {
//       print("**** Error uploading image: $error ****");
//       devtools.log('Error uploading image: $error');
//       throw Exception('Error uploading image');
//     }
//   }

//   Future<void> updatePatientImage(String patientId, String imageUrl) async {
//     try {
//       // Update the patient document in Firestore with the image URL
//       //
//       await firestore
//           .collection('clinics')
//           .doc(clinicId)
//           .collection('patients')
//           .doc(patientId)
//           .update({'patientPicUrl': imageUrl});
//     } catch (error) {
//       devtools.log('Error updating patient image URL: $error');
//       throw Exception('Error updating patient image URL');
//     }
//   }

//   //----------------------------------------------------------//
//   Future<List<Map<String, dynamic>>> fetchRecentPatients({
//     //required String doctorId,
//     required String clinicId,
//   }) async {
//     devtools.log('_fetchRecentPatients invoked');
//     try {
//       // final clinicsCollection =
//       //     FirebaseFirestore.instance.collection('clinics');
//       final clinicsCollection = firestore.collection('clinics');
//       final patientsQuerySnapshot = await clinicsCollection
//           .doc(clinicId)
//           .collection('patients')
//           .orderBy('searchCount', descending: true)
//           .limit(4)
//           .get();

//       final recentPatientsData = <Map<String, dynamic>>[];

//       for (final patientDoc in patientsQuerySnapshot.docs) {
//         final patientData = patientDoc.data();
//         if (patientData.isNotEmpty) {
//           recentPatientsData.add(patientData);
//         }
//       }

//       return recentPatientsData;
//     } catch (e) {
//       // Handle error
//       devtools.log('Error fetching recent patients: $e');
//       return []; // Return an empty list in case of an error
//     }
//   }

//   //----------------------------------------------------------//

//   Future<void> restorePatient(Patient patient) async {
//     try {
//       final patientData =
//           patient.toMap(); // Convert the patient object to a map
//       // final clinicRef = FirebaseFirestore.instance
//       final clinicRef = firestore.collection('clinics').doc(patient.clinicId);
//       final patientsRef =
//           clinicRef.collection('patients').doc(patient.patientId);
//       await patientsRef.set(patientData); // Restore the patient document
//     } catch (e) {
//       devtools.log('Error restoring patient: $e');
//       // throw e; // Rethrow the error to be handled by the caller
//       rethrow;
//     }
//   }

//   //--------------------------------------------------------------------------//

//   Future<void> deletePatient(String patientId, String doctorName) async {
//     final AppointmentService appointmentService = AppointmentService();
//     try {
//       final patientRef = _patientsCollection.doc(patientId);

//       // Fetch the patient's profile picture URL
//       final patientSnapshot = await patientRef.get();
//       final patientData = patientSnapshot.data() as Map<String, dynamic>?;
//       final profilePicUrl = patientData?['patientPicUrl'] as String?;

//       // Fetch treatment picture URLs
//       final treatmentsSnapshot =
//           await patientRef.collection('treatments').get();

//       final List<String> treatmentPictureUrls = [];

//       // Fetch pictures for each treatment document
//       for (final treatmentDoc in treatmentsSnapshot.docs) {
//         final picturesSnapshot =
//             await treatmentDoc.reference.collection('pictures').get();
//         final pictureUrls = picturesSnapshot.docs
//             .map((doc) => doc.data()['picUrl'] as String?)
//             .where((url) => url != null && url.isNotEmpty)
//             .cast<String>()
//             .toList();
//         treatmentPictureUrls.addAll(pictureUrls);
//       }

//       // Capture appointment IDs and details
//       final appointmentsSnapshot =
//           await patientRef.collection('appointments').get();
//       final appointments = appointmentsSnapshot.docs.map((doc) {
//         return {
//           'appointmentId': doc['appointmentId'],
//           'appointmentDate': (doc['date'] as Timestamp).toDate(),
//         };
//       }).toList();
//       devtools.log('appointments found are $appointments');

//       // Delete patient's appointments sub-collection
//       await deleteCollection(patientRef.collection('appointments'), 20);

//       // Reference to main appointments collection
//       final mainAppointmentsCollection = appointmentService.clinicsCollection
//           .doc(clinicId)
//           .collection('appointments');

//       for (var appointment in appointments) {
//         // Delete from main appointments collection
//         final snapshot = await mainAppointmentsCollection
//             .where('appointmentId', isEqualTo: appointment['appointmentId'])
//             .get();

//         for (final doc in snapshot.docs) {
//           devtools.log('doc');

//           final appointmentSlot = doc['slot'];

//           await doc.reference.delete();

//           // Update slots for future appointments
//           if (appointment['appointmentDate'].isAfter(DateTime.now())) {
//             await appointmentService.updateSlot(
//               clinicId,
//               doctorName,
//               appointment['appointmentDate'],
//               appointmentSlot,
//             );
//           }
//         }
//       }

//       // Delete other sub-collections under treatments
//       for (final treatmentDoc in treatmentsSnapshot.docs) {
//         await deleteCollection(treatmentDoc.reference.collection('notes'), 20);
//         await deleteCollection(
//             treatmentDoc.reference.collection('payments'), 20);
//         await deleteCollection(
//             treatmentDoc.reference.collection('prescriptions'), 20);
//         await deleteCollection(
//             treatmentDoc.reference.collection('pictures'), 20);
//         await treatmentDoc.reference.delete();
//       }

//       // Delete the patient document
//       await patientRef.delete();

//       // Delete pictures from storage
//       final List<String> allPictureUrls = [];
//       if (profilePicUrl != null && profilePicUrl.isNotEmpty) {
//         allPictureUrls.add(profilePicUrl);
//       }
//       allPictureUrls.addAll(treatmentPictureUrls);

//       // Call the _deletePicturesFromStorage with the valid URLs
//       await deletePicturesFromStorage(allPictureUrls);
//     } catch (e) {
//       throw Exception('Error deleting patient: $e');
//     }
//   }

//   Future<void> deleteCollection(
//       CollectionReference collectionRef, int batchSize) async {
//     devtools.log('Welcome inside _deleteCollection');
//     QuerySnapshot snapshot;
//     do {
//       snapshot = await collectionRef.limit(batchSize).get();
//       for (DocumentSnapshot doc in snapshot.docs) {
//         await doc.reference.delete();
//       }
//     } while (snapshot.size == batchSize);
//   }

//   Future<void> deletePicturesFromStorage(List<String> urls) async {
//     // Assuming `urls` is a List<String>, there's no need to check for null
//     final validUrls = urls.where((url) => url.isNotEmpty).toList();

//     if (validUrls.isEmpty) {
//       devtools.log('No valid URLs to delete from storage.');
//       return; // Return early if there are no valid URLs
//     }

//     //final storage = FirebaseStorage.instance;

//     for (final url in validUrls) {
//       try {
//         final path = extractFilePathFromUrl(url);
//         final ref = storage.ref().child(path);
//         await ref.delete();
//         devtools.log('Deleted picture from storage: $url');
//       } catch (error) {
//         devtools.log('Error deleting picture from storage: $error');
//       }
//     }
//   }

//   String extractFilePathFromUrl(String url) {
//     final Uri uri = Uri.parse(url);
//     final path = uri.path.replaceFirst('/v0/b/', '');
//     final pathSegments = path.split('/o/');
//     return pathSegments[1].split('?').first.replaceAll('%2F', '/');
//   }

//   //--------------------------------------------------------------------------//
//   // Add this method to your PatientService class
//   Future<List<Patient>> getPatientsBySearch(String? query) async {
//     devtools.log(
//         '@@@@@@@@@@@@  Welcome to getPatientsBySearch ! clinicId is $clinicId and doctorId is $doctorId @@@@@@@@@@@@');
//     try {
//       // bool isNumeric = double.tryParse(query) != null;
//       if (query == null || query.isEmpty) {
//         return [];
//       }

//       bool isNumeric = double.tryParse(query) != null;

//       QuerySnapshot querySnapshot;

//       // Fetch patients by doctorId
//       // final patientsCollection = FirebaseFirestore.instance
//       final patientsCollection =
//           firestore.collection('clinics').doc(clinicId).collection('patients');

//       querySnapshot =
//           await patientsCollection.where('doctorId', isEqualTo: doctorId).get();

//       // Prepare an empty list to hold matching patients
//       List<Patient> matchingPatients = [];

//       for (var doc in querySnapshot.docs) {
//         final data = doc.data() as Map<String, dynamic>;
//         final patientName = data['patientName'].toString().toLowerCase();
//         final patientMobileNumber = data['patientMobileNumber'].toString();

//         // Perform search logic: Match either by patient name (contains) or mobile number
//         if (isNumeric) {
//           if (patientMobileNumber.contains(query)) {
//             matchingPatients.add(Patient(
//               patientId: doc.id,
//               patientName: data['patientName'] ?? '',
//               patientMobileNumber: data['patientMobileNumber'] ?? '',
//               age: data['age'] ?? 0,
//               gender: data['gender'] ?? '',
//               patientPicUrl: data['patientPicUrl'] ?? '',
//               uhid: data['uhid'] ?? '',
//               clinicId: clinicId,
//               doctorId: doctorId,
//               searchCount: data['searchCount'] ?? 0,
//             ));
//           }
//         } else {
//           if (patientName.contains(query.toLowerCase())) {
//             matchingPatients.add(Patient(
//               patientId: doc.id,
//               patientName: data['patientName'] ?? '',
//               patientMobileNumber: data['patientMobileNumber'] ?? '',
//               age: data['age'] ?? 0,
//               gender: data['gender'] ?? '',
//               patientPicUrl: data['patientPicUrl'] ?? '',
//               uhid: data['uhid'] ?? '',
//               clinicId: clinicId,
//               doctorId: doctorId,
//               searchCount: data['searchCount'] ?? 0,
//             ));
//           }
//         }
//       }

//       return matchingPatients;
//     } catch (e) {
//       devtools.log('Error searching patients: $e');
//       return [];
//     }
//   }

//   //---------------------------------------------------------------------------//
//   Future<List<Patient>> getPatientsBySearchForCurrentUser(String? query) async {
//     devtools.log('Welcome to getPatientsBySearchForCurrentUser !');
//     print('**** Welcome to getPatientsBySearchForCurrentUser ! ****');

//     try {
//       if (query == null || query.isEmpty) {
//         print('**** query is null or empty ! ****');
//         return [];
//       }

//       bool isNumeric = double.tryParse(query) != null;

//       //QuerySnapshot querySnapshot;

//       // Fetch patients by doctorId and search by name or mobile number
//       // final patientsCollection = FirebaseFirestore.instance
//       final patientsCollection = firestore
//           .collection('clinics')
//           .doc(clinicId)
//           .collection('patients')
//           .where('doctorId', isEqualTo: doctorId); // Include doctorId filter

//       // Process snapshot and filter results
//       final snapshot = await patientsCollection.get();
//       final List<Patient> matchingPatients = [];
//       print(
//           '**** patientsCollection is $patientsCollection, snapshot is $snapshot ****');

//       for (final doc in snapshot.docs) {
//         print('**** doc in snapshot is $doc ****');
//         final data = doc.data() as Map<String, dynamic>;
//         final patientName = data['patientName'].toString().toLowerCase();
//         print(
//             '**** Comparing "$patientName" with query "${query.toLowerCase()}" ****');

//         final patientMobileNumber = data['patientMobileNumber'].toString();
//         print('**** Comparing "$patientMobileNumber" with query "$query" ****');

//         print('**** Comparing "$patientName" with "$query" ****');

//         if (isNumeric) {
//           if (patientMobileNumber.contains(query)) {
//             print(
//                 '**** Found matching patient by mobile: ${data['patientName']}****');
//             matchingPatients.add(Patient.fromJson(data));
//           }
//         } else {
//           if (patientName.contains(query.toLowerCase())) {
//             print(
//                 '**** Found matching patient by name: ${data['patientName']} ****');
//             matchingPatients.add(Patient.fromJson(data));
//           }
//         }
//       }

//       return matchingPatients;
//     } catch (e) {
//       devtools.log('Error searching patients: $e');
//       print('**** Error searching patients: $e ****');
//       return [];
//     }
//   }

//   //--------------------------------------------------------------------------//
//   // Method to listen to recent patients (Top 4 by searchCount)
//   Stream<List<Map<String, dynamic>>> listenToTopRecentPatients(
//       String clinicId) {
//     // return FirebaseFirestore.instance
//     return firestore
//         .collection('clinics')
//         .doc(clinicId)
//         .collection('patients')
//         .orderBy('searchCount', descending: true)
//         .limit(4)
//         .snapshots()
//         .map((snapshot) {
//       return snapshot.docs.map((doc) => doc.data()).toList();
//     });
//   }

//   // Method to listen to changes in all patients to monitor their searchCount
//   Stream<List<Map<String, dynamic>>> listenToAllPatients(String clinicId) {
//     // return FirebaseFirestore.instance
//     return firestore
//         .collection('clinics')
//         .doc(clinicId)
//         .collection('patients')
//         .snapshots()
//         .map((snapshot) {
//       return snapshot.docs.map((doc) => doc.data()).toList();
//     });
//   }

//   //--------------------------------------------------------------------------//
// }

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! //
// code below has direct call to FirebaseFirestore and FirebaseStorage despite dependecy injection
// import 'dart:io';
// import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:firebase_storage/firebase_storage.dart';
// import 'package:neocare_dental_app/firestore/appointment_service.dart';
// import 'dart:developer' as devtools show log;
// import 'package:neocare_dental_app/mywidgets/patient.dart';
// import 'package:uuid/uuid.dart';

// class PatientService {
//   final String clinicId;
//   final String doctorId;
//   final FirebaseFirestore firestore;

//   // PatientService(
//   //   this.clinicId,
//   //   this.doctorId,
//   //   FirebaseFirestore? firestoreInstance, this.firestore,
//   // );
//   // Constructor with a default value for firestore
//   PatientService(
//     this.clinicId,
//     this.doctorId, {
//     FirebaseFirestore? firestoreInstance,
//   }) : firestore = firestoreInstance ?? FirebaseFirestore.instance;

//   //----------------------------------------------------------------------------//
//   // CollectionReference get _patientsCollection => FirebaseFirestore.instance
//   //     .collection('clinics')
//   //     .doc(clinicId)
//   //     .collection('patients');

//   // factory PatientService.withClinicId(String clinicId, String doctorId) {
//   //   return PatientService(clinicId, doctorId);
//   // }

//   // Use the injected firestore instance here
//   CollectionReference get _patientsCollection =>
//       firestore.collection('clinics').doc(clinicId).collection('patients');

//   factory PatientService.withClinicId(String clinicId, String doctorId) {
//     return PatientService(clinicId, doctorId);
//   }
//   //----------------------------------------------------------------------------//

//   Future<String> addPatient(
//     String patientName,
//     String gender,
//     int age,
//     String patientMobileNumber,
//     String? patientPicUrl,
//   ) async {
//     try {
//       //print('_patientsCollection this time is : $_patientsCollection');
//       devtools.log(
//           'Adding new patient: This is coming from addPatient inside patient service');
//       devtools.log('Name: $patientName');
//       devtools.log('Gender: $gender');
//       devtools.log('Age: $age');
//       devtools.log('patientMobileNumber: $patientMobileNumber');
//       devtools.log('Clinic ID: $clinicId');

//       final uhid = await generateUhid(
//           clinicId); // Generate the unique uhid for the patient
//       devtools.log('this uhid is just generated by _generateUhid method $uhid');

//       final patientData = {
//         'patientName': patientName,
//         'gender': gender,
//         'age': age,
//         'patientMobileNumber': patientMobileNumber,
//         'uhid': uhid,
//         'patientPicUrl': patientPicUrl, // Save the image URL in Firestore
//         'doctorId': doctorId,
//         'clinicId': clinicId,
//       };

//       final newPatientRef =
//           _patientsCollection.doc(); // Firestore will generate a unique ID
//       final newPatientId = newPatientRef.id; // Get the generated ID
//       patientData['patientId'] =
//           newPatientId; // Assign the ID to the patientData
//       devtools.log('patientData is $patientData');
//       try {
//         devtools.log(
//             'this is coming from inside the try block before await newPatientRef.set(patientData);');
//         await newPatientRef.set(patientData);
//       } catch (e) {
//         devtools.log('error in pushing data due to $e');
//       }
//       // await newPatientRef.set(patientData);
//       devtools.log('newPatientRef is $newPatientRef');
//       // Return the ID of the newly created patient
//       return newPatientId; // Return the generated ID
//     } catch (e) {
//       devtools.log('Error while adding patient: $e');
//       return ''; // Return an empty string if there was an error
//     }
//   }

//   // Update an existing patient in Firestore
//   Future<void> updatePatient(String patientId, String patientName,
//       String gender, int age, String patientMobileNumber) async {
//     final patientData = {
//       'patientName': patientName,
//       'gender': gender,
//       'age': age,
//       'patientMobileNumber': patientMobileNumber,
//     };
//     await _patientsCollection.doc(patientId).update(patientData);
//   }

//   // Get all patients from Firestore
//   Future<List<Map<String, dynamic>>> getAllPatients() async {
//     final snapshot = await _patientsCollection.get();
//     return snapshot.docs
//         .map((doc) => doc.data() as Map<String, dynamic>)
//         .toList();
//   }

//   // Future<String> generateUhid(String clinicId) async {
//   //   final clinicRef =
//   //       FirebaseFirestore.instance.collection('clinics').doc(clinicId);
//   //   final uhidRef = clinicRef.collection('uhids').doc('current');

//   //   // Use a transaction to get the current uhid value and increment it
//   //   return FirebaseFirestore.instance.runTransaction((transaction) async {
//   //     final doc = await transaction.get(uhidRef);
//   //     final currentUhid = doc.exists ? doc.data()!['value'] : 0;
//   //     final newUhid = currentUhid + 1;
//   //     transaction.set(uhidRef, {'value': newUhid});
//   //     return newUhid.toString().padLeft(6, '0'); // Convert to 6-digit string
//   //   });
//   // }
//   Future<String> generateUhid(String clinicId) async {
//     final clinicRef = firestore
//         .collection('clinics')
//         .doc(clinicId); // Use the injected instance
//     final uhidRef = clinicRef.collection('uhids').doc('current');

//     // Use a transaction to get the current uhid value and increment it
//     return firestore.runTransaction((transaction) async {
//       final doc = await transaction.get(uhidRef);
//       final currentUhid = doc.exists ? doc.data()!['value'] : 0;
//       final newUhid = currentUhid + 1;
//       transaction.set(uhidRef, {'value': newUhid});
//       return newUhid.toString().padLeft(6, '0'); // Convert to 6-digit string
//     });
//   }

//   //-----------------------------------------------------------------------//

//   Future<void> searchPatient(String patientName) async {
//     try {
//       final querySnapshot = await _patientsCollection
//           .where('patientName', isEqualTo: patientName)
//           .get();

//       if (querySnapshot.docs.isNotEmpty) {
//         final patientId = querySnapshot.docs.first.id;

//         // Increment the searchCount for the found patient
//         await incrementSearchCount(patientId);
//       } else {
//         // Handle case when no patient is found with the given name
//         devtools.log('No patient found with name: $patientName');
//       }
//     } catch (e) {
//       devtools.log('Error while searching patient: $e');
//     }
//   }

//   // Get a single patient from Firestore by patientId
//   Future<Map<String, dynamic>?> getPatientById(String patientId) async {
//     if (patientId.isEmpty) {
//       return null; // Return early if patientId is empty
//     }

//     final patientRef = _patientsCollection.doc(patientId);

//     // Use a transaction to increment the searchCount and get patient data
//     return FirebaseFirestore.instance.runTransaction((transaction) async {
//       final doc = await transaction.get(patientRef);

//       if (doc.exists) {
//         // Increment the searchCount
//         final currentSearchCount =
//             (doc.data() as Map<String, dynamic>)['searchCount'] ?? 0;
//         transaction.update(patientRef, {'searchCount': currentSearchCount + 1});

//         // Return the patient data
//         return doc.data() as Map<String, dynamic>?;
//       } else {
//         return null; // Patient not found
//       }
//     });
//   }

//   Future<void> incrementSearchCount(String patientId) async {
//     devtools
//         .log('Welcome inside incrementSearchCount. patientId is $patientId');
//     DocumentReference patientDoc = _patientsCollection.doc(patientId);
//     devtools.log('patientDoc  is $patientDoc');
//     devtools.log('patientDoc path is ${patientDoc.path}');

//     // Use a transaction to ensure atomicity
//     await FirebaseFirestore.instance.runTransaction((transaction) async {
//       devtools.log('Starting transaction for patientId $patientId');
//       DocumentSnapshot snapshot = await transaction.get(patientDoc);
//       devtools.log('snapshot exists: ${snapshot.exists}');
//       devtools.log('snapshot data: ${snapshot.data()}');

//       if (!snapshot.exists) {
//         devtools.log('Patient does not exist!');
//         throw Exception("Patient does not exist!");
//       }

//       // Ensure you are using the correct field name here
//       int currentCount = snapshot.get('searchCount') ?? 0;
//       devtools.log('Current search count is $currentCount');
//       transaction.update(patientDoc, {'searchCount': currentCount + 1});

//       devtools.log('incremented Search count is ${currentCount + 1}');
//     }).then((_) {
//       devtools.log('Transaction completed successfully');
//     }).catchError((error) {
//       devtools.log('Transaction failed with error: $error');
//     });
//   }

//   Future<List<Patient>> handleSearchInput(String query) async {
//     try {
//       final querySnapshot = await _patientsCollection
//           .where('patientName', isEqualTo: query)
//           .get();

//       if (querySnapshot.docs.isNotEmpty) {
//         final patientData =
//             querySnapshot.docs.first.data() as Map<String, dynamic>?;
//         final patientList = <Patient>[];

//         if (patientData != null) {
//           final searchedPatient = Patient(
//             patientId: querySnapshot.docs.first.id,
//             age: patientData['age'] as int? ?? 0,
//             gender: patientData['gender'] as String? ?? '',
//             patientName: patientData['patientName'] as String? ?? '',
//             patientMobileNumber:
//                 patientData['patientMobileNumber'] as String? ?? '',
//             patientPicUrl: patientData['patientPicUrl'] as String? ?? '',
//             uhid: patientData['uhid'] as String? ?? '',
//             clinicId: patientData['clinicId'] as String? ?? '',
//             doctorId: patientData['doctorId'] as String? ?? '',
//             searchCount: patientData['searchCount'] as int? ?? 0,
//           );

//           // Increment the searchCount for the found patient
//           //await incrementSearchCount(searchedPatient.patientId);

//           // Add the patient to the list
//           patientList.add(searchedPatient);
//         }

//         return patientList;
//       } else {
//         return []; // Return an empty list if no patient is found
//       }
//     } catch (e) {
//       devtools.log('Error handling search input: $e');
//       return []; // Return an empty list in case of an error
//     }
//   }

//   Stream<List<Patient>> searchPatientsForCurrentUserRealTime(
//       String userInput, Patient? selectedPatient) {
//     final patientsCollection =
//         _patientsCollection.where('doctorId', isEqualTo: doctorId);

//     return patientsCollection.snapshots().asyncMap((snapshot) async {
//       final matchingPatients = <Patient>[];

//       for (final doc in snapshot.docs) {
//         final data = doc.data() as Map<String, dynamic>?;

//         if (data != null) {
//           final patientName =
//               (data['patientName'] as String?)?.toLowerCase() ?? '';
//           final patientMobileNumber =
//               (data['patientMobileNumber'] as String?) ?? '';

//           if (patientName.contains(userInput.toLowerCase()) ||
//               patientMobileNumber.contains(userInput)) {
//             // Create a Patient instance
//             final patient = Patient(
//               patientId: doc.id,
//               age: data['age'] as int? ?? 0,
//               gender: data['gender'] as String? ?? '',
//               patientName: data['patientName'] as String? ?? '',
//               patientMobileNumber: data['patientMobileNumber'] as String? ?? '',
//               patientPicUrl: data['patientPicUrl'] as String? ?? '',
//               uhid: data['uhid'] as String? ?? '',
//               clinicId: data['clinicId'] as String? ?? '',
//               doctorId: data['doctorId'] as String? ?? '',
//               searchCount: data['searchCount'] as int? ?? 0,
//             );

//             // Add the patient to the list
//             matchingPatients.add(patient);
//           }
//         }
//       }

//       return matchingPatients;
//     });
//   }

//   //-------------------------------------------------------------------------//
//   Stream<List<Patient>> searchPatientsRealTime(
//       String userInput, Patient? selectedPatient) {
//     final patientsCollection = _patientsCollection; // No filter by doctorId

//     return patientsCollection.snapshots().asyncMap((snapshot) async {
//       final matchingPatients = <Patient>[];

//       for (final doc in snapshot.docs) {
//         final data = doc.data() as Map<String, dynamic>?;

//         if (data != null) {
//           final patientName =
//               (data['patientName'] as String?)?.toLowerCase() ?? '';
//           final patientMobileNumber =
//               (data['patientMobileNumber'] as String?) ?? '';

//           if (patientName.contains(userInput.toLowerCase()) ||
//               patientMobileNumber.contains(userInput)) {
//             // Create a Patient instance
//             final patient = Patient(
//               patientId: doc.id,
//               age: data['age'] as int? ?? 0,
//               gender: data['gender'] as String? ?? '',
//               patientName: data['patientName'] as String? ?? '',
//               patientMobileNumber: data['patientMobileNumber'] as String? ?? '',
//               patientPicUrl: data['patientPicUrl'] as String? ?? '',
//               uhid: data['uhid'] as String? ?? '',
//               clinicId: data['clinicId'] as String? ?? '',
//               doctorId: data['doctorId'] as String? ?? '',
//               searchCount: data['searchCount'] as int? ?? 0,
//             );

//             // Add the patient to the list
//             matchingPatients.add(patient);
//           }
//         }
//       }

//       return matchingPatients;
//     });
//   }
//   //-------------------------------------------------------------------------//

//   Stream<List<Patient>> getAllPatientsForCurrentUserRealTime() {
//     final patientsCollection =
//         _patientsCollection.where('doctorId', isEqualTo: doctorId);

//     return patientsCollection.snapshots().asyncMap((snapshot) async {
//       final Map<String, List<Patient>> patientsByAlphabet = {};

//       for (final doc in snapshot.docs) {
//         final data = doc.data() as Map<String, dynamic>?;

//         if (data != null) {
//           final patient = Patient(
//             patientId: doc.id,
//             age: data['age'] as int? ?? 0,
//             gender: data['gender'] as String? ?? '',
//             patientName: data['patientName'] as String? ?? '',
//             patientMobileNumber: data['patientMobileNumber'] as String? ?? '',
//             patientPicUrl: data['patientPicUrl'] as String? ?? '',
//             uhid: data['uhid'] as String? ?? '',
//             clinicId: data['clinicId'] as String? ?? '',
//             doctorId: data['doctorId'] as String? ?? '',
//             searchCount: data['searchCount'] as int? ?? 0,
//           );

//           final patientFirstChar =
//               patient.patientName.isNotEmpty ? patient.patientName[0] : '';

//           // Group patients by their first character
//           patientsByAlphabet.putIfAbsent(patientFirstChar, () => []);
//           patientsByAlphabet[patientFirstChar]!.add(patient);
//         }
//       }

//       // Sort the list by first characters
//       final sortedPatients = patientsByAlphabet.entries.toList()
//         ..sort((a, b) => a.key.compareTo(b.key));

//       // Flatten the list
//       final allPatients =
//           sortedPatients.expand((entry) => entry.value).toList();

//       return allPatients;
//     });
//   }

//   //-------------------------------------------------------------------------//
//   Stream<List<Patient>> getAllPatientsRealTime() {
//     final patientsCollection = _patientsCollection; // No filter by doctorId

//     return patientsCollection.snapshots().asyncMap((snapshot) async {
//       final Map<String, List<Patient>> patientsByAlphabet = {};

//       for (final doc in snapshot.docs) {
//         final data = doc.data() as Map<String, dynamic>?;

//         if (data != null) {
//           final patient = Patient(
//             patientId: doc.id,
//             age: data['age'] as int? ?? 0,
//             gender: data['gender'] as String? ?? '',
//             patientName: data['patientName'] as String? ?? '',
//             patientMobileNumber: data['patientMobileNumber'] as String? ?? '',
//             patientPicUrl: data['patientPicUrl'] as String? ?? '',
//             uhid: data['uhid'] as String? ?? '',
//             clinicId: data['clinicId'] as String? ?? '',
//             doctorId: data['doctorId'] as String? ?? '',
//             searchCount: data['searchCount'] as int? ?? 0,
//           );

//           final patientFirstChar =
//               patient.patientName.isNotEmpty ? patient.patientName[0] : '';

//           // Group patients by their first character
//           patientsByAlphabet.putIfAbsent(patientFirstChar, () => []);
//           patientsByAlphabet[patientFirstChar]!.add(patient);
//         }
//       }

//       // Sort the list by first characters
//       final sortedPatients = patientsByAlphabet.entries.toList()
//         ..sort((a, b) => a.key.compareTo(b.key));

//       // Flatten the list
//       final allPatients =
//           sortedPatients.expand((entry) => entry.value).toList();

//       return allPatients;
//     });
//   }
//   //-------------------------------------------------------------------------//

//   Future<String> uploadPatientImage(File image, String patientId) async {
//     try {
//       // Generate a unique filename for the image
//       final fileName = 'patient_images/$patientId/${const Uuid().v4()}';

//       // Upload the image to Firebase Storage
//       await FirebaseStorage.instance.ref(fileName).putFile(image);

//       // Get the download URL of the uploaded image
//       final imageUrl =
//           await FirebaseStorage.instance.ref(fileName).getDownloadURL();

//       return imageUrl;
//     } catch (error) {
//       devtools.log('Error uploading image: $error');
//       throw Exception('Error uploading image');
//     }
//   }

//   Future<void> updatePatientImage(String patientId, String imageUrl) async {
//     try {
//       // Update the patient document in Firestore with the image URL
//       await FirebaseFirestore.instance
//           .collection('clinics')
//           .doc(clinicId)
//           .collection('patients')
//           .doc(patientId)
//           .update({'patientPicUrl': imageUrl});
//     } catch (error) {
//       devtools.log('Error updating patient image URL: $error');
//       throw Exception('Error updating patient image URL');
//     }
//   }

//   //----------------------------------------------------------//
//   Future<List<Map<String, dynamic>>> fetchRecentPatients({
//     required String doctorId,
//     required String clinicId,
//   }) async {
//     devtools.log('_fetchRecentPatients invoked');
//     try {
//       final clinicsCollection =
//           FirebaseFirestore.instance.collection('clinics');
//       final patientsQuerySnapshot = await clinicsCollection
//           .doc(clinicId)
//           .collection('patients')
//           .orderBy('searchCount', descending: true)
//           .limit(4)
//           .get();

//       final recentPatientsData = <Map<String, dynamic>>[];

//       for (final patientDoc in patientsQuerySnapshot.docs) {
//         final patientData = patientDoc.data();
//         if (patientData.isNotEmpty) {
//           recentPatientsData.add(patientData);
//         }
//       }

//       return recentPatientsData;
//     } catch (e) {
//       // Handle error
//       devtools.log('Error fetching recent patients: $e');
//       return []; // Return an empty list in case of an error
//     }
//   }

//   //----------------------------------------------------------//

//   Future<void> restorePatient(Patient patient) async {
//     try {
//       final patientData =
//           patient.toMap(); // Convert the patient object to a map
//       final clinicRef = FirebaseFirestore.instance
//           .collection('clinics')
//           .doc(patient.clinicId);
//       final patientsRef =
//           clinicRef.collection('patients').doc(patient.patientId);
//       await patientsRef.set(patientData); // Restore the patient document
//     } catch (e) {
//       devtools.log('Error restoring patient: $e');
//       // throw e; // Rethrow the error to be handled by the caller
//       rethrow;
//     }
//   }

//   //--------------------------------------------------------------------------//

//   Future<void> deletePatient(String patientId, String doctorName) async {
//     final AppointmentService appointmentService = AppointmentService();
//     try {
//       final patientRef = _patientsCollection.doc(patientId);

//       // Fetch the patient's profile picture URL
//       final patientSnapshot = await patientRef.get();
//       final patientData = patientSnapshot.data() as Map<String, dynamic>?;
//       final profilePicUrl = patientData?['patientPicUrl'] as String?;

//       // Fetch treatment picture URLs
//       final treatmentsSnapshot =
//           await patientRef.collection('treatments').get();

//       final List<String> treatmentPictureUrls = [];

//       // Fetch pictures for each treatment document
//       for (final treatmentDoc in treatmentsSnapshot.docs) {
//         final picturesSnapshot =
//             await treatmentDoc.reference.collection('pictures').get();
//         final pictureUrls = picturesSnapshot.docs
//             .map((doc) => doc.data()['picUrl'] as String?)
//             .where((url) => url != null && url.isNotEmpty)
//             .cast<String>()
//             .toList();
//         treatmentPictureUrls.addAll(pictureUrls);
//       }

//       // Capture appointment IDs and details
//       final appointmentsSnapshot =
//           await patientRef.collection('appointments').get();
//       final appointments = appointmentsSnapshot.docs.map((doc) {
//         return {
//           'appointmentId': doc['appointmentId'],
//           'appointmentDate': (doc['date'] as Timestamp).toDate(),
//         };
//       }).toList();
//       devtools.log('appointments found are $appointments');

//       // Delete patient's appointments sub-collection
//       await _deleteCollection(patientRef.collection('appointments'), 20);

//       // Reference to main appointments collection
//       final mainAppointmentsCollection = appointmentService.clinicsCollection
//           .doc(clinicId)
//           .collection('appointments');

//       for (var appointment in appointments) {
//         // Delete from main appointments collection
//         final snapshot = await mainAppointmentsCollection
//             .where('appointmentId', isEqualTo: appointment['appointmentId'])
//             .get();

//         for (final doc in snapshot.docs) {
//           devtools.log('doc');

//           final appointmentSlot = doc['slot'];

//           await doc.reference.delete();

//           // Update slots for future appointments
//           if (appointment['appointmentDate'].isAfter(DateTime.now())) {
//             await appointmentService.updateSlot(
//               clinicId,
//               doctorName,
//               appointment['appointmentDate'],
//               appointmentSlot,
//             );
//           }
//         }
//       }

//       // Delete other sub-collections under treatments
//       for (final treatmentDoc in treatmentsSnapshot.docs) {
//         await _deleteCollection(treatmentDoc.reference.collection('notes'), 20);
//         await _deleteCollection(
//             treatmentDoc.reference.collection('payments'), 20);
//         await _deleteCollection(
//             treatmentDoc.reference.collection('prescriptions'), 20);
//         await _deleteCollection(
//             treatmentDoc.reference.collection('pictures'), 20);
//         await treatmentDoc.reference.delete();
//       }

//       // Delete the patient document
//       await patientRef.delete();

//       // Delete pictures from storage
//       final List<String> allPictureUrls = [];
//       if (profilePicUrl != null && profilePicUrl.isNotEmpty) {
//         allPictureUrls.add(profilePicUrl);
//       }
//       allPictureUrls.addAll(treatmentPictureUrls);

//       // Call the _deletePicturesFromStorage with the valid URLs
//       await _deletePicturesFromStorage(allPictureUrls);
//     } catch (e) {
//       throw Exception('Error deleting patient: $e');
//     }
//   }

//   Future<void> _deleteCollection(
//       CollectionReference collectionRef, int batchSize) async {
//     devtools.log('Welcome inside _deleteCollection');
//     QuerySnapshot snapshot;
//     do {
//       snapshot = await collectionRef.limit(batchSize).get();
//       for (DocumentSnapshot doc in snapshot.docs) {
//         await doc.reference.delete();
//       }
//     } while (snapshot.size == batchSize);
//   }

//   Future<void> _deletePicturesFromStorage(List<String> urls) async {
//     // Assuming `urls` is a List<String>, there's no need to check for null
//     final validUrls = urls.where((url) => url.isNotEmpty).toList();

//     if (validUrls.isEmpty) {
//       devtools.log('No valid URLs to delete from storage.');
//       return; // Return early if there are no valid URLs
//     }

//     final storage = FirebaseStorage.instance;

//     for (final url in validUrls) {
//       try {
//         final path = _extractFilePathFromUrl(url);
//         final ref = storage.ref().child(path);
//         await ref.delete();
//         devtools.log('Deleted picture from storage: $url');
//       } catch (error) {
//         devtools.log('Error deleting picture from storage: $error');
//       }
//     }
//   }

//   String _extractFilePathFromUrl(String url) {
//     final Uri uri = Uri.parse(url);
//     final path = uri.path.replaceFirst('/v0/b/', '');
//     final pathSegments = path.split('/o/');
//     return pathSegments[1].split('?').first.replaceAll('%2F', '/');
//   }

//   //--------------------------------------------------------------------------//
//   // Add this method to your PatientService class
//   Future<List<Patient>> getPatientsBySearch(String? query) async {
//     devtools.log('@@@@@@@@@@@@  Welcome to getPatientsBySearch ! @@@@@@@@@@@@');
//     try {
//       // bool isNumeric = double.tryParse(query) != null;
//       if (query == null || query.isEmpty) {
//         return [];
//       }

//       bool isNumeric = double.tryParse(query) != null;

//       QuerySnapshot querySnapshot;

//       // Fetch patients by doctorId
//       final patientsCollection = FirebaseFirestore.instance
//           .collection('clinics')
//           .doc(clinicId)
//           .collection('patients');

//       querySnapshot =
//           await patientsCollection.where('doctorId', isEqualTo: doctorId).get();

//       // Prepare an empty list to hold matching patients
//       List<Patient> matchingPatients = [];

//       for (var doc in querySnapshot.docs) {
//         final data = doc.data() as Map<String, dynamic>;
//         final patientName = data['patientName'].toString().toLowerCase();
//         final patientMobileNumber = data['patientMobileNumber'].toString();

//         // Perform search logic: Match either by patient name (contains) or mobile number
//         if (isNumeric) {
//           if (patientMobileNumber.contains(query)) {
//             matchingPatients.add(Patient(
//               patientId: doc.id,
//               patientName: data['patientName'] ?? '',
//               patientMobileNumber: data['patientMobileNumber'] ?? '',
//               age: data['age'] ?? 0,
//               gender: data['gender'] ?? '',
//               patientPicUrl: data['patientPicUrl'] ?? '',
//               uhid: data['uhid'] ?? '',
//               clinicId: clinicId,
//               doctorId: doctorId,
//               searchCount: data['searchCount'] ?? 0,
//             ));
//           }
//         } else {
//           if (patientName.contains(query.toLowerCase())) {
//             matchingPatients.add(Patient(
//               patientId: doc.id,
//               patientName: data['patientName'] ?? '',
//               patientMobileNumber: data['patientMobileNumber'] ?? '',
//               age: data['age'] ?? 0,
//               gender: data['gender'] ?? '',
//               patientPicUrl: data['patientPicUrl'] ?? '',
//               uhid: data['uhid'] ?? '',
//               clinicId: clinicId,
//               doctorId: doctorId,
//               searchCount: data['searchCount'] ?? 0,
//             ));
//           }
//         }
//       }

//       return matchingPatients;
//     } catch (e) {
//       devtools.log('Error searching patients: $e');
//       return [];
//     }
//   }

//   //---------------------------------------------------------------------------//
//   Future<List<Patient>> getPatientsBySearchForCurrentUser(String? query) async {
//     devtools.log('Welcome to getPatientsBySearch !');

//     try {
//       if (query == null || query.isEmpty) {
//         return [];
//       }

//       bool isNumeric = double.tryParse(query) != null;

//       QuerySnapshot querySnapshot;

//       // Fetch patients by doctorId and search by name or mobile number
//       final patientsCollection = FirebaseFirestore.instance
//           .collection('clinics')
//           .doc(clinicId)
//           .collection('patients')
//           .where('doctorId', isEqualTo: doctorId); // Include doctorId filter

//       // Process snapshot and filter results
//       final snapshot = await patientsCollection.get();
//       final List<Patient> matchingPatients = [];

//       for (final doc in snapshot.docs) {
//         final data = doc.data() as Map<String, dynamic>;
//         final patientName = data['patientName'].toString().toLowerCase();
//         final patientMobileNumber = data['patientMobileNumber'].toString();

//         if (isNumeric) {
//           if (patientMobileNumber.contains(query)) {
//             matchingPatients.add(Patient.fromJson(data));
//           }
//         } else {
//           if (patientName.contains(query.toLowerCase())) {
//             matchingPatients.add(Patient.fromJson(data));
//           }
//         }
//       }

//       return matchingPatients;
//     } catch (e) {
//       devtools.log('Error searching patients: $e');
//       return [];
//     }
//   }

//   //--------------------------------------------------------------------------//
//   // Method to listen to recent patients (Top 4 by searchCount)
//   Stream<List<Map<String, dynamic>>> listenToTopRecentPatients() {
//     return FirebaseFirestore.instance
//         .collection('clinics')
//         .doc(clinicId)
//         .collection('patients')
//         .orderBy('searchCount', descending: true)
//         .limit(4)
//         .snapshots()
//         .map((snapshot) {
//       return snapshot.docs.map((doc) => doc.data()).toList();
//     });
//   }

//   // Method to listen to changes in all patients to monitor their searchCount
//   Stream<List<Map<String, dynamic>>> listenToAllPatients() {
//     return FirebaseFirestore.instance
//         .collection('clinics')
//         .doc(clinicId)
//         .collection('patients')
//         .snapshots()
//         .map((snapshot) {
//       return snapshot.docs.map((doc) => doc.data()).toList();
//     });
//   }

//   //--------------------------------------------------------------------------//
// }
